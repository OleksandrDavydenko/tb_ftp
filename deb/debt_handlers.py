import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import CallbackContext
from auth import is_phone_number_in_power_bi, get_user_debt_data
from .generate_debt_graph import generate_debt_graph
from .generate_pie_chart import generate_pie_chart
from messages.weekly_overdue_debts import send_overdue_debts_by_request  # –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

TEMP_DIR = 'temp'
if not os.path.exists(TEMP_DIR):
    os.makedirs(TEMP_DIR)


def _has_debt(debt_data) -> bool:
    if not debt_data:
        return False
    try:
        total = sum(float(row.get('[Sum_$]', 0) or 0) for row in debt_data)
        return total > 0
    except Exception:
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ–∂ —Ç–∞–±–ª–∏—Ü–µ—é, –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–æ—é, –¥—ñ–∞–≥—Ä–∞–º–æ—é —Ç–∞ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
async def show_debt_options(update: Update, context: CallbackContext) -> None:
    context.user_data['menu'] = 'debt_options'
    phone_number = context.user_data.get('phone_number')
    found, employee_name, _ = is_phone_number_in_power_bi(phone_number)

    if not found:
        # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –æ–¥—Ä–∞–∑—É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
                                           one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
                                        reply_markup=reply_markup)
        return

    debt_data = get_user_debt_data(employee_name)
    if _has_debt(debt_data):
        total_debt = sum(float(row.get('[Sum_$]', 0) or 0) for row in debt_data)
        await update.message.reply_text(
            f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–µ–±—ñ—Ç–æ—Ä–∫–∏ –¥–ª—è {employee_name}: {total_debt:.2f} USD"
        )

        table_button = KeyboardButton("–¢–∞–±–ª–∏—Ü—è")
        histogram_button = KeyboardButton("–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞")
        pie_chart_button = KeyboardButton("–î—ñ–∞–≥—Ä–∞–º–∞")
        overdue_button = KeyboardButton("–ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∞ –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å")
        back_button = KeyboardButton("–ù–∞–∑–∞–¥")

        custom_keyboard = [
            [table_button, histogram_button, pie_chart_button],
            [overdue_button],
            [back_button]
        ]
        reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:", reply_markup=reply_markup)
    else:
        # –ù–Ü–Ø–ö–ò–• ¬´–¢–∞–±–ª–∏—Ü—è/–î—ñ–∞–≥—Ä–∞–º–∞¬ª ‚Äî –ª–∏—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è + –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
                                           one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(f"‚ÑπÔ∏è –£ {employee_name} –Ω–µ–º–∞—î –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ.",
                                        reply_markup=reply_markup)
        return


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∞ –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å"
async def handle_overdue_debt(update: Update, context: CallbackContext) -> None:
    context.user_data['menu'] = 'overdue_debt'  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –º–µ–Ω—é

    # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
    await send_overdue_debts_by_request(update, context)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —ñ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    back_button = KeyboardButton("–ù–∞–∑–∞–¥")
    main_menu_button = KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    

    reply_markup = ReplyKeyboardMarkup(
        [[back_button, main_menu_button]],
        one_time_keyboard=True,
        resize_keyboard=True
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' –∞–±–æ '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é':", reply_markup=reply_markup)







# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–∞–±–ª–∏—Ü—ñ
async def show_debt_details(update: Update, context: CallbackContext) -> None:
    context.user_data['menu'] = 'debt_details'
    phone_number = context.user_data['phone_number']
    found, employee_name, _ = is_phone_number_in_power_bi(phone_number)
    debt_data = get_user_debt_data(employee_name)

    if not _has_debt(debt_data):
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
                                           one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –¥–µ–±—ñ—Ç–æ—Ä—Ü—ñ –¥–ª—è {employee_name}.",
                                        reply_markup=reply_markup)
        return

    if debt_data:
        response = f"üìã *–î–µ–±—ñ—Ç–æ—Ä–∫–∞ –¥–ª—è {employee_name}:*\n\n"
        total_debt = 0

        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ –∫–ª—ñ—î–Ω—Ç–∞–º–∏
        grouped_data = {}
        for row in debt_data:
            client = row.get('[Client]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
            account = row.get('[Account]', '–ù–µ–≤—ñ–¥–æ–º–æ')
            sum_debt = float(row.get('[Sum_$]', '0'))

            if client not in grouped_data:
                grouped_data[client] = []
            grouped_data[client].append({'Account': account, 'Sum_$': sum_debt})
            total_debt += sum_debt

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
        for client, accounts in grouped_data.items():
            response += f"üë§ *–ö–ª—ñ—î–Ω—Ç:* {client}\n"
            client_total = sum([acc['Sum_$'] for acc in accounts])
            response += f"   üíµ *–°—É–º–∞ –ø–æ –∫–ª—ñ—î–Ω—Ç—É:* {client_total:.2f} USD\n"
            for account_data in accounts:
                account = account_data['Account']
                sum_debt = account_data['Sum_$']
                response += f"      üìÑ *–†–∞—Ö—É–Ω–æ–∫:* {account}, üí∞ {sum_debt:.2f} USD\n"
            response += "\n"

        response += f"üíµ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {total_debt:.2f} USD\n"

        await update.message.reply_text(response, parse_mode="Markdown")
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {employee_name}.")


    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —Ç–∞ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    custom_keyboard = [[KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=True, resize_keyboard=True)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏
async def show_debt_histogram(update: Update, context: CallbackContext):
    context.user_data['menu'] = 'debt_histogram'
    phone_number = context.user_data['phone_number']
    found, employee_name, _ = is_phone_number_in_power_bi(phone_number)
    debt_data = get_user_debt_data(employee_name)

    if not _has_debt(debt_data):
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
                                           one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –¥–µ–±—ñ—Ç–æ—Ä—Ü—ñ –¥–ª—è {employee_name}.",
                                        reply_markup=reply_markup)
        return

    if debt_data:
        file_path = generate_debt_graph(debt_data, employee_name, TEMP_DIR)
        try:
            with open(file_path, 'rb') as graph_file:
                await update.message.reply_photo(photo=InputFile(graph_file), caption="–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –¥–µ–±—ñ—Ç–æ—Ä–∫–∏.")
            os.remove(file_path)
        except FileNotFoundError:
            await update.message.reply_text("–ì—Ä–∞—Ñ—ñ–∫ –Ω–µ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.")
    else:
        await update.message.reply_text(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {employee_name}.")

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —Ç–∞ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    custom_keyboard = [[KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=True, resize_keyboard=True)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

    

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å–µ–∫—Ç–æ—Ä–Ω–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
async def show_debt_pie_chart(update: Update, context: CallbackContext):
    context.user_data['menu'] = 'debt_pie_chart'
    phone_number = context.user_data['phone_number']
    found, employee_name, _ = is_phone_number_in_power_bi(phone_number)
    debt_data = get_user_debt_data(employee_name)

    if not _has_debt(debt_data):
        reply_markup = ReplyKeyboardMarkup([[KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
                                           one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –¥–µ–±—ñ—Ç–æ—Ä—Ü—ñ –¥–ª—è {employee_name}.",
                                        reply_markup=reply_markup)
        return

    if debt_data:
        file_path = generate_pie_chart(debt_data, employee_name, TEMP_DIR)
        try:
            with open(file_path, 'rb') as graph_file:
                await update.message.reply_photo(photo=InputFile(graph_file), caption="–°–µ–∫—Ç–æ—Ä–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –¥–µ–±—ñ—Ç–æ—Ä–∫–∏.")
            os.remove(file_path)
        except FileNotFoundError:
            await update.message.reply_text("–î—ñ–∞–≥—Ä–∞–º–∞ –Ω–µ –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.")
    else:
        await update.message.reply_text(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {employee_name}.")

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —Ç–∞ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    custom_keyboard = [[KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=True, resize_keyboard=True)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

