import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import CallbackContext
from auth import is_phone_number_in_power_bi, get_user_debt_data
from .generate_debt_graph import generate_debt_graph
from .generate_pie_chart import generate_pie_chart
from messages.weekly_overdue_debts import send_overdue_debts_by_request  # –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞


import datetime
from db import get_all_users

TEMP_DIR = 'temp'
if not os.path.exists(TEMP_DIR):
    os.makedirs(TEMP_DIR)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ–∂ —Ç–∞–±–ª–∏—Ü–µ—é, –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–æ—é, –¥—ñ–∞–≥—Ä–∞–º–æ—é —Ç–∞ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
async def show_debt_options(update: Update, context: CallbackContext) -> None:
    context.user_data['menu'] = 'debt_options'
    phone_number = context.user_data.get('phone_number')
    found, employee_name = is_phone_number_in_power_bi(phone_number)

    if found:
        debt_data = get_user_debt_data(employee_name)
        if debt_data:
            total_debt = sum(float(row.get('[Sum_$]', 0)) for row in debt_data if row.get('[Sum_$]', 0))
            await update.message.reply_text(f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–µ–±—ñ—Ç–æ—Ä–∫–∏ –¥–ª—è {employee_name}: {total_debt:.2f} USD")
        else:
            await update.message.reply_text(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {employee_name}.")
    
    table_button = KeyboardButton(text="–¢–∞–±–ª–∏—Ü—è")
    histogram_button = KeyboardButton(text="–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞")
    pie_chart_button = KeyboardButton(text="–î—ñ–∞–≥—Ä–∞–º–∞")
    overdue_button = KeyboardButton("–ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∞ –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å")
    back_button = KeyboardButton(text="–ù–∞–∑–∞–¥")
    custom_keyboard = [[table_button, histogram_button, pie_chart_button], [overdue_button], [back_button]]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:", reply_markup=reply_markup)




# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∞ –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å"
async def handle_overdue_debt(update: Update, context: CallbackContext) -> None:
    context.user_data['menu'] = 'overdue_debt'  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –º–µ–Ω—é

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —É –î–î.–ú–ú.–†–†
    def format_date(date_str):
        try:
            date = datetime.datetime.strptime(date_str.split('T')[0], '%Y-%m-%d').date()
            return date.strftime('%d.%m.%y')
        except ValueError:
            return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'

    telegram_id = update.message.chat_id
    user_data = next((u for u in get_all_users() if u['telegram_id'] == telegram_id), None)

    if not user_data:
        await update.message.reply_text("‚ùó –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    manager_name = user_data['employee_name']
    debts = get_user_debt_data(manager_name)

    # –§–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
    if debts:
        overdue_debts = []
        for debt in debts:
            plan_date_pay_str = debt.get('[PlanDatePay]', '')
            if not plan_date_pay_str or plan_date_pay_str == '1899-12-30T00:00:00':
                continue

            plan_date_pay = datetime.datetime.strptime(plan_date_pay_str.split('T')[0], '%Y-%m-%d').date()
            if plan_date_pay < datetime.datetime.now().date():
                overdue_days = (datetime.datetime.now().date() - plan_date_pay).days
                overdue_debts.append({
                    'Client': debt.get('[Client]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                    'Deal': debt.get('[Deal]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                    'Account': debt.get('[Account]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                    'Sum_$': debt.get('[Sum_$]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                    'PlanDatePay': format_date(plan_date_pay_str),
                    'AccountDate': format_date(debt.get('[AccountDate]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')),
                    'OverdueDays': overdue_days
                })

        if overdue_debts:
            message = f"üìã *–ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∞ –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–ª—è {manager_name}:*\n\n"
            for overdue in overdue_debts:
                message += (
                    f"‚ñ´Ô∏è *–ö–ª—ñ—î–Ω—Ç:* {overdue['Client']}\n"
                    f"   *–£–≥–æ–¥–∞:* {overdue['Deal']}\n"
                    f"   *–†–∞—Ö—É–Ω–æ–∫:* {overdue['Account']}\n"
                    f"   *–î–∞—Ç–∞ —Ä–∞—Ö—É–Ω–∫—É:* {overdue['AccountDate']}\n"
                    f"   *–ü–ª–∞–Ω–æ–≤–∞ –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏:* {overdue['PlanDatePay']}\n"
                    f"   *–î–Ω—ñ–≤ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ:* {overdue['OverdueDays']}\n"
                    f"   *–°—É–º–∞ ($):* {overdue['Sum_$']}\n\n"
                )
            message += "üö® *–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —Ü—ñ —Ä–∞—Ö—É–Ω–∫–∏.*"
        else:
            message = "‚úÖ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ—ó –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ."
    else:
        message = "‚ÑπÔ∏è –î–∞–Ω—ñ –¥–ª—è –≤–∞—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ."

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" —ñ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    back_button = KeyboardButton("–ù–∞–∑–∞–¥")
    main_menu_button = KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    reply_markup = ReplyKeyboardMarkup([[back_button, main_menu_button]], resize_keyboard=True, one_time_keyboard=True)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –∑–≤—ñ—Ç—É —Ä–∞–∑–æ–º —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ–¥–Ω–æ–º—É –≤–∏–∫–ª–∏–∫—É
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)







# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–∞–±–ª–∏—Ü—ñ
async def show_debt_details(update: Update, context: CallbackContext) -> None:
    context.user_data['menu'] = 'debt_details'
    phone_number = context.user_data['phone_number']
    found, employee_name = is_phone_number_in_power_bi(phone_number)
    debt_data = get_user_debt_data(employee_name)

    if debt_data:
        response = f"üìã *–î–µ–±—ñ—Ç–æ—Ä–∫–∞ –¥–ª—è {employee_name}:*\n\n"
        total_debt = 0

        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ –∫–ª—ñ—î–Ω—Ç–∞–º–∏
        grouped_data = {}
        for row in debt_data:
            client = row.get('[Client]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
            account = row.get('[Account]', '–ù–µ–≤—ñ–¥–æ–º–æ')
            sum_debt = float(row.get('[Sum_$]', '0'))

            if client not in grouped_data:
                grouped_data[client] = []
            grouped_data[client].append({'Account': account, 'Sum_$': sum_debt})
            total_debt += sum_debt

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É
        for client, accounts in grouped_data.items():
            response += f"üë§ *–ö–ª—ñ—î–Ω—Ç:* {client}\n"
            client_total = sum([acc['Sum_$'] for acc in accounts])
            response += f"   üíµ *–°—É–º–∞ –ø–æ –∫–ª—ñ—î–Ω—Ç—É:* {client_total:.2f} USD\n"
            for account_data in accounts:
                account = account_data['Account']
                sum_debt = account_data['Sum_$']
                response += f"      üìÑ *–†–∞—Ö—É–Ω–æ–∫:* {account}, üí∞ {sum_debt:.2f} USD\n"
            response += "\n"

        response += f"üíµ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {total_debt:.2f} USD\n"

        await update.message.reply_text(response, parse_mode="Markdown")
    else:
        await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {employee_name}.")


    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —ñ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    back_button = KeyboardButton(text="–ù–∞–∑–∞–¥")
    main_menu_button = KeyboardButton(text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    reply_markup = ReplyKeyboardMarkup([[back_button, main_menu_button]], one_time_keyboard=True)
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' –∞–±–æ '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏
async def show_debt_histogram(update: Update, context: CallbackContext):
    context.user_data['menu'] = 'debt_histogram'
    phone_number = context.user_data['phone_number']
    found, employee_name = is_phone_number_in_power_bi(phone_number)
    debt_data = get_user_debt_data(employee_name)

    if debt_data:
        file_path = generate_debt_graph(debt_data, employee_name, TEMP_DIR)
        try:
            with open(file_path, 'rb') as graph_file:
                await update.message.reply_photo(photo=InputFile(graph_file), caption="–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –¥–µ–±—ñ—Ç–æ—Ä–∫–∏.")
            os.remove(file_path)
        except FileNotFoundError:
            await update.message.reply_text("–ì—Ä–∞—Ñ—ñ–∫ –Ω–µ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.")
    else:
        await update.message.reply_text(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {employee_name}.")

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —ñ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    back_button = KeyboardButton(text="–ù–∞–∑–∞–¥")
    main_menu_button = KeyboardButton(text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    reply_markup = ReplyKeyboardMarkup([[back_button, main_menu_button]], one_time_keyboard=True)
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' –∞–±–æ '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å–µ–∫—Ç–æ—Ä–Ω–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
async def show_debt_pie_chart(update: Update, context: CallbackContext):
    context.user_data['menu'] = 'debt_pie_chart'
    phone_number = context.user_data['phone_number']
    found, employee_name = is_phone_number_in_power_bi(phone_number)
    debt_data = get_user_debt_data(employee_name)

    if debt_data:
        file_path = generate_pie_chart(debt_data, employee_name, TEMP_DIR)
        try:
            with open(file_path, 'rb') as graph_file:
                await update.message.reply_photo(photo=InputFile(graph_file), caption="–°–µ–∫—Ç–æ—Ä–Ω–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –¥–µ–±—ñ—Ç–æ—Ä–∫–∏.")
            os.remove(file_path)
        except FileNotFoundError:
            await update.message.reply_text("–î—ñ–∞–≥—Ä–∞–º–∞ –Ω–µ –±—É–ª–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.")
    else:
        await update.message.reply_text(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {employee_name}.")

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —ñ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    back_button = KeyboardButton(text="–ù–∞–∑–∞–¥")
    main_menu_button = KeyboardButton(text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    reply_markup = ReplyKeyboardMarkup([[back_button, main_menu_button]], one_time_keyboard=True)
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' –∞–±–æ '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(update: Update, context: CallbackContext):
    context.user_data['menu'] = 'main_menu'
    debt_button = KeyboardButton(text="–î–µ–±—ñ—Ç–æ—Ä–∫–∞")
    custom_keyboard = [[debt_button]]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=True)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)
