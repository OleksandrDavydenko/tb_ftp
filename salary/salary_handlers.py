import asyncio
import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext
import logging

from .salary_queries import (
    get_salary_data,
    get_salary_payments,
    get_bonuses,
    format_salary_table,
    get_bonus_payments,
    get_prize_payments 
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MONTHS_UA = [
    "–°—ñ—á–µ–Ω—å",
    "–õ—é—Ç–∏–π",
    "–ë–µ—Ä–µ–∑–µ–Ω—å",
    "–ö–≤—ñ—Ç–µ–Ω—å",
    "–¢—Ä–∞–≤–µ–Ω—å",
    "–ß–µ—Ä–≤–µ–Ω—å",
    "–õ–∏–ø–µ–Ω—å",
    "–°–µ—Ä–ø–µ–Ω—å",
    "–í–µ—Ä–µ—Å–µ–Ω—å",
    "–ñ–æ–≤—Ç–µ–Ω—å",
    "–õ–∏—Å—Ç–æ–ø–∞–¥",
    "–ì—Ä—É–¥–µ–Ω—å",
]
MONTHS_MAP = {name: idx + 1 for idx, name in enumerate(MONTHS_UA)}




# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü—ñ–¥–º–µ–Ω—é "–ó–∞—Ä–ø–ª–∞—Ç–∞"
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def show_salary_menu(update: Update, context: CallbackContext) -> None:
    kb = [
        [KeyboardButton("–û–∫–ª–∞–¥")],
        [KeyboardButton("–í—ñ–¥–æ–º—ñ—Å—Ç—å –ë–æ–Ω—É—Å–∏")],
        [KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")],
    ]
    context.user_data["menu"] = "salary_menu"
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True)
    )

async def show_bonuses_placeholder(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("üìë –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —É —Ä–æ–∑—Ä–æ–±—Ü—ñ‚Ä¶")
    kb = [[KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É —Ä–æ–∫—É / –º—ñ—Å—è—Ü—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def show_salary_years(update: Update, context: CallbackContext) -> None:
    current_year = datetime.datetime.now().year
    years = [str(y) for y in range(2025, current_year + 1)]

    kb = [[KeyboardButton(y)] for y in years] + [[KeyboardButton("–ù–∞–∑–∞–¥")]]
    context.user_data["menu"] = "salary_years"
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))


async def show_salary_months(update: Update, context: CallbackContext) -> None:
    kb = [[KeyboardButton(m)] for m in MONTHS_UA]
    kb.append([KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    context.user_data["menu"] = "salary_months"
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü–æ–∫–∞–∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def show_salary_details(update: Update, context: CallbackContext) -> None:
    employee = context.user_data.get("employee_name")
    year = context.user_data.get("selected_year")
    month_name = context.user_data.get("selected_month")

    if not (employee and year and month_name):
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫ —Ç–∞ –º—ñ—Å—è—Ü—å.")
        return

    month_num = MONTHS_MAP.get(month_name)
    if month_num is None:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π –º—ñ—Å—è—Ü—å.")
        return

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    salary_rows = get_salary_data(employee, year, month_name)
    payments_rows = get_salary_payments(employee, year, month_name)
    bonus_rows = get_bonuses(employee, year, month_name)
    bonus_payments = get_bonus_payments(employee, year, month_name)
    prize_payments = get_prize_payments(employee, year, month_name)


    if not (salary_rows or payments_rows or bonus_rows or bonus_payments):
        await update.message.reply_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É.")
        return

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
    main_table, bonus_table, prize_table = format_salary_table(
        salary_rows, employee, int(year), month_num,
        payments_rows or [], bonus_rows or [], bonus_payments or [], prize_payments or []
    )


    # --- 1Ô∏è‚É£ –æ—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
    main_msg = (
        heading("–†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π –ª–∏—Å—Ç") +
        f"–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫: {employee}\n" +
        f"–ü–µ—Ä—ñ–æ–¥: {month_name} {year}\n\n" +
        code_block(main_table)
    )
    await _send_autodelete(update, context, main_msg)

    # --- 2Ô∏è‚É£ –±–æ–Ω—É—Å–∏ (—è–∫—â–æ —î)
    if bonus_rows or bonus_payments:
        if bonus_table and "–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ" not in bonus_table:
            bonus_msg = (
                heading("–ë–æ–Ω—É—Å–∏") +
                f"–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫: {employee}\n" +
                f"–ü–µ—Ä—ñ–æ–¥: {month_name} {year}\n\n" +
                code_block(bonus_table)
            )
            await _send_autodelete(update, context, bonus_msg)

    # --- 3Ô∏è‚É£ –ø—Ä–µ–º—ñ—ó (—è–∫—â–æ —î –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–ø–ª–∞—Ç–∏ –ø—Ä–µ–º—ñ–π)
    has_prize_accruals = any(
        float(row.get("[–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –ü—Ä–µ–º—ñ—ó UAH]", 0)) > 0 or float(row.get("[–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –ü—Ä–µ–º—ñ—ó USD]", 0)) > 0
        for row in salary_rows or []
    )
    has_prize_payments = prize_payments and len(prize_payments) > 0

    if has_prize_accruals or has_prize_payments:
        if prize_table:
            prize_msg = (
                heading("–ü—Ä–µ–º—ñ—ó") +
                f"–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫: {employee}\n" +
                f"–ü–µ—Ä—ñ–æ–¥: {month_name} {year}\n\n" +
                code_block(prize_table)
            )
            await _send_autodelete(update, context, prize_msg)


    # --- –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    nav_kb = [[KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", 
        reply_markup=ReplyKeyboardMarkup(nav_kb, one_time_keyboard=True, resize_keyboard=True)
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#   Service helpers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def heading(text: str) -> str:
    return f"*{text}*\n"


def code_block(content: str) -> str:
    return f"```\n{content}\n```"


async def _send_autodelete(update: Update, context: CallbackContext, message_text: str, *, delay: int = 60):
    msg = await update.message.reply_text(message_text, parse_mode="Markdown")
    warn = await update.message.reply_text("‚ö†Ô∏è –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥!")
    asyncio.create_task(_delete_later(context, update.effective_chat.id, [msg.message_id, warn.message_id], delay))


async def _delete_later(context: CallbackContext, chat_id: int, mids: list[int], delay: int):
    await asyncio.sleep(delay)
    for mid in mids:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=mid)
        except Exception:
            pass
