import os
import re
import json
import logging
from datetime import datetime, timezone
import requests

from db import (
    add_telegram_user,
    get_user_status,
    get_employee_name,
    delete_user_payments,
    update_user_joined_at,
)

# ---------------------------
# –ù–û–†–ú–ê–õ–Ü–ó–ê–¶–Ü–Ø –ù–û–ú–ï–†–Ü–í
# ---------------------------
def normalize_phone_number(phone_number: str) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –¥–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É E.164 –±–µ–∑ –ø–ª—é—Å–∞ (–¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω—å):
      - –ª–∏—à–∞—î –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏
      - —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ñ–æ—Ä–º–∞—Ç–∏ 0XXXXXXXXX / 380XXXXXXXXX ‚Üí 380XXXXXXXXX
      - —è–∫—â–æ –Ω–æ–º–µ—Ä —É–∂–µ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 447... 1...), –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏)
    –í–ê–ñ–õ–ò–í–û: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ë–ï–ó "+" (—â–æ–± –∫–ª—é—á—ñ –≤ –º–∞–ø–∞—Ö –±—É–ª–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ).
    """
    if not phone_number:
        return ""

    digits = re.sub(r"\D", "", str(phone_number))

    # –Ø–∫—â–æ 10 —Ü–∏—Ñ—Ä —ñ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "0" (–º—ñ—Å—Ü–µ–≤–∏–π UA) ‚Üí –¥–æ–¥–∞–º–æ 380
    if len(digits) == 10 and digits.startswith("0"):
        return f"380{digits[1:]}"

    # –Ø–∫—â–æ 9 —Ü–∏—Ñ—Ä (–±–µ–∑ –∫–æ–¥—É) ‚Üí –≤–≤–∞–∂–∞—î–º–æ UA —ñ –¥–æ–¥–∞—î–º–æ 380
    if len(digits) == 9:
        return f"380{digits}"

    # –Ø–∫—â–æ 12 —ñ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 380 ‚Üí –≤–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π UA
    if len(digits) == 12 and digits.startswith("380"):
        return digits

    # –Ü–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ UK 447..., US 1...)
    return digits


# ---------------------------
# POWER BI TOKEN
# ---------------------------
def get_power_bi_token() -> str | None:
    """
    –û—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω –¥–ª—è Power BI (ROPC). –ü–∞—Ä–æ–ª—å –±–µ—Ä–µ–º–æ –∑ ENV: PASSWORD
    """
    client_id = os.getenv("PBI_CLIENT_ID", "706d72b2-a9a2-4d90-b0d8-b08f58459ef6")
    username = os.getenv("PBI_USERNAME", "od@ftpua.com")
    password = os.getenv("PASSWORD")
    if not password:
        logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ PASSWORD —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")
        return None

    url = "https://login.microsoftonline.com/common/oauth2/token"
    body = {
        "grant_type": "password",
        "resource": "https://analysis.windows.net/powerbi/api",
        "client_id": client_id,
        "username": username,
        "password": password,
    }

    try:
        resp = requests.post(url, data=body, headers={"Content-Type": "application/x-www-form-urlencoded"}, timeout=30)
        if resp.status_code == 200:
            return resp.json().get("access_token")
        logging.error(f"‚ùå Error getting token: {resp.status_code}, {resp.text}")
    except Exception as e:
        logging.exception(f"‚ùå Exception getting PBI token: {e}")
    return None


# ---------------------------
# POWER BI HELPERS
# ---------------------------
PBI_DATASET_ID = os.getenv("PBI_DATASET_ID", "8b80be15-7b31-49e4-bc85-8b37a0d98f1c")
PBI_EXEC_URL = f"https://api.powerbi.com/v1.0/myorg/datasets/{PBI_DATASET_ID}/executeQueries"
PBI_HEADERS_BASE = {"Content-Type": "application/json"}


def _pbi_post(query_obj: dict) -> dict | None:
    token = get_power_bi_token()
    if not token:
        return None
    headers = {**PBI_HEADERS_BASE, "Authorization": f"Bearer {token}"}
    try:
        resp = requests.post(PBI_EXEC_URL, headers=headers, json=query_obj, timeout=60)
        if resp.status_code == 200:
            return resp.json()
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Power BI {resp.status_code}: {resp.text}")
        return None
    except Exception as e:
        logging.exception(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Power BI: {e}")
        return None


def get_employee_directory_from_power_bi() -> dict[str, dict]:
    """
    –ë—É–¥—É—î "–µ—Ç–∞–ª–æ–Ω" —ñ–∑ PBI:
      { employee_name: { "phone": "<normalized>", "status": "<–°—Ç–∞—Ç—É—Å>", "raw_phone": "<—è–∫ —É PBI>" } }
    –Ø–∫—â–æ —É PBI –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ –ø–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É ‚Äî –ø—Ä—ñ–æ—Ä–∏—Ç–µ–∑—É—î–º–æ —Ä—è–¥–æ–∫ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "–ê–∫—Ç–∏–≤–Ω–∏–π".
    """
    query = {
        "queries": [{
            "query": """
                EVALUATE
                SELECTCOLUMNS(
                    Employees,
                    "Employee", Employees[Employee],
                    "Phone", Employees[PhoneNumberTelegram],
                    "Status", Employees[Status]
                )
            """
        }],
        "serializerSettings": {"includeNulls": True},
    }

    data = _pbi_post(query)
    if not data:
        return {}

    rows = data.get("results", [{}])[0].get("tables", [{}])[0].get("rows", [])
    directory: dict[str, dict] = {}

    for r in rows:
        emp = (r.get("[Employee]") or "").strip()
        phone_raw = (r.get("[Phone]") or "").strip()
        status = (r.get("[Status]") or "").strip()
        phone_norm = normalize_phone_number(phone_raw) if phone_raw else ""

        if emp not in directory:
            directory[emp] = {"phone": phone_norm, "status": status, "raw_phone": phone_raw}
        else:
            # –Ø–∫—â–æ –≤–∂–µ —î –∑–∞–ø–∏—Å, –∞–ª–µ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å "–ê–∫—Ç–∏–≤–Ω–∏–π" ‚Äî –ø—ñ–¥–º—ñ–Ω—è—î–º–æ
            if status == "–ê–∫—Ç–∏–≤–Ω–∏–π":
                directory[emp] = {"phone": phone_norm, "status": status, "raw_phone": phone_raw}
    return directory


def is_phone_number_in_power_bi(phone_number: str) -> tuple[bool, str | None, str | None]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ PBI –¢–Ü–õ–¨–ö–ò –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –Ω–æ–º–µ—Ä—É (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ):
    –ü–æ–≤–µ—Ä—Ç–∞—î: (is_active, employee_name, status_from_pbi)
    """
    normalized = normalize_phone_number(phone_number)
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤ PBI –∑–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º (–±–µ–∑ –ø–ª—é—Å–∞)
    # –ë–µ—Ä–µ–º–æ –í–°–Ü —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –∑ Employees[PhoneNumberTelegram], –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ñ DAX –≤–∞–∂–∫–æ,
    # —Ç–æ–º—É –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø—Ä–æ—Å—Ç—ñ—à–∏–º —Å–ø–æ—Å–æ–±–æ–º: –ø–æ—Ç—è–≥–Ω–µ–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –ø—ñ–¥–º–Ω–æ–∂–∏–Ω—É –∑–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏–º —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è–º
    # (—è–∫—â–æ —É –≤–∞—Å —É PBI –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è "–ø–ª—é—Å" ‚Äî –ø—Ä–∏–±–∏—Ä–∞–π—Ç–µ –π–æ–≥–æ –≤ Power Query –∞–±–æ –∑–±–µ—Ä—ñ–≥–∞–π—Ç–µ –±–µ–∑ –ø–ª—é—Å–∞).
    query = {
        "queries": [{
            "query": f"""
                EVALUATE
                VAR T =
                    SELECTCOLUMNS(
                        Employees,
                        "Employee", Employees[Employee],
                        "Phone", Employees[PhoneNumberTelegram],
                        "Status", Employees[Status]
                    )
                RETURN
                    FILTER(T, SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE([Phone], " ", ""), "-", ""), "(", ""), ")", "") = "{normalized}")
            """
        }],
        "serializerSettings": {"includeNulls": True},
    }

    data = _pbi_post(query)
    if not data:
        return False, None, None

    rows = data.get("results", [{}])[0].get("tables", [{}])[0].get("rows", [])
    # –Ø–∫—â–æ –∫—ñ–ª—å–∫–∞ ‚Äî –≤—ñ–∑—å–º–µ–º–æ –ø–µ—Ä—à–∏–π, –ø—Ä—ñ–æ—Ä–∏—Ç–µ–∑—É–≤–∞—Ç–∏ –ê–∫—Ç–∏–≤–Ω–∏–π
    if not rows:
        logging.warning(f"üö´ –ù–æ–º–µ—Ä {normalized} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ PBI.")
        return False, None, None

    # –Ø–∫—â–æ —î –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤, —à—É–∫–∞—î–º–æ "–ê–∫—Ç–∏–≤–Ω–∏–π"
    row = None
    for r in rows:
        if (r.get("[Status]") or "").strip() == "–ê–∫—Ç–∏–≤–Ω–∏–π":
            row = r
            break
    if row is None:
        row = rows[0]

    employee_name = (row.get("[Employee]") or "").strip()
    status = (row.get("[Status]") or "").strip()
    is_active = status == "–ê–∫—Ç–∏–≤–Ω–∏–π"
    logging.info(f"‚úÖ PBI: {employee_name} / {status} –¥–ª—è {normalized}")
    return is_active, employee_name or None, status or None


# ---------------------------
# HIGH-LEVEL OPS
# ---------------------------
def verify_and_add_user(phone_number: str, telegram_id: int | str, telegram_name: str):
    """
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ –≤ –±–æ—Ç–∞:
      - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–æ–º–µ—Ä —É PBI
      - –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –æ–Ω–æ–≤–ª—é—î joined_at, —Å—Ç–∞—Ç—É—Å, —ñ–º'—è
      - –¥–æ–¥–∞—î/–æ–Ω–æ–≤–ª—é—î –∑–∞–ø–∏—Å –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ add_telegram_user
    """
    is_active, employee_name_pbi, status_from_pbi = is_phone_number_in_power_bi(phone_number)
    logging.info(
        f"üìä PBI –¥–ª—è {phone_number}: is_active={is_active}, employee={employee_name_pbi}, status={status_from_pbi}"
    )

    # fallback: —è–∫—â–æ PBI –Ω–µ –¥–∞–≤ name ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –∑ –ë–î
    employee_name = employee_name_pbi or get_employee_name(phone_number)

    new_status = "active" if status_from_pbi == "–ê–∫—Ç–∏–≤–Ω–∏–π" else "deleted"
    current_status = get_user_status(phone_number)
    logging.info(f"üõ†Ô∏è –ë–î —Å—Ç–∞—Ç—É—Å: {current_status} ‚Üí –Ω–æ–≤–∏–π: {new_status}")

    # –Ø–∫—â–æ –≤–∂–µ –±—É–≤ deleted ‚Äî —á–∏—Å—Ç–∏–º–æ –ø–ª–∞—Ç–µ–∂—ñ (–ø–æ–ª—ñ—Ç–∏–∫–∞ –±–µ–∑–ø–µ–∫–∏)
    if current_status == "deleted":
        logging.info(f"üßπ –í–∏–¥–∞–ª—è—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ –¥–ª—è {phone_number}, –±–æ —Å—Ç–∞—Ç—É—Å –±—É–≤ 'deleted'.")
        delete_user_payments(phone_number)

    if current_status != new_status:
        if current_status == "deleted" and new_status == "active":
            now_utc = datetime.now(timezone.utc)
            update_user_joined_at(phone_number, now_utc)
            logging.info(f"üîÑ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. joined_at ‚Üí {now_utc.isoformat()}")

        add_telegram_user(phone_number, telegram_id, telegram_name, employee_name, new_status)
        logging.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: {phone_number} ‚Üí {new_status}")
    else:
        # –≤—Å–µ –æ–¥–Ω–æ –æ–Ω–æ–≤–∏–º–æ —ñ–º'—è/telegram, —â–æ–± –Ω–µ –≤—ñ–¥—Å—Ç–∞–≤–∞–ª–∏
        add_telegram_user(phone_number, telegram_id, telegram_name, employee_name, new_status)
        logging.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –±–µ–∑ –∑–º—ñ–Ω: {phone_number} ‚Üí {current_status}")


def get_user_debt_data(manager_name: str):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–∫–∏ –¥–ª—è –¥–µ–±—ñ—Ç–æ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑ PBI.
    """
    query = {
        "queries": [{
            "query": f"""
                EVALUATE 
                SELECTCOLUMNS(
                    FILTER(
                        Deb,
                        Deb[Manager] = "{manager_name}" && Deb[Inform] <> 1
                    ),
                    "Client", Deb[Client],
                    "Sum_$", Deb[Sum_$],
                    "Manager", Deb[Manager],
                    "PlanDatePay", Deb[PlanDatePay],
                    "Account", Deb[Account],
                    "Deal", Deb[Deal],
                    "AccountDate", Deb[AccountDate]
                )
            """
        }],
        "serializerSettings": {"includeNulls": True}
    }

    data = _pbi_post(query)
    if not data:
        return None
    rows = data.get("results", [{}])[0].get("tables", [{}])[0].get("rows", [])
    return rows
