import re
import requests
import os
from db import add_telegram_user, get_user_status, get_employee_name  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–∑–∞–ª–∏—à–∞—î –ª–∏—à–µ –æ—Å—Ç–∞–Ω–Ω—ñ 9 —Ü–∏—Ñ—Ä)
def normalize_phone_number(phone_number):
    digits = re.sub(r'\D', '', phone_number)
    return digits[-9:]

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É Power BI
def get_power_bi_token():
    client_id = '706d72b2-a9a2-4d90-b0d8-b08f58459ef6'
    username = 'od@ftpua.com'
    password = os.getenv('PASSWORD')
    url = 'https://login.microsoftonline.com/common/oauth2/token'
    
    body = {
        'grant_type': 'password',
        'resource': 'https://analysis.windows.net/powerbi/api',
        'client_id': client_id,
        'username': username,
        'password': password
    }
    
    response = requests.post(url, data=body, headers={'Content-Type': 'application/x-www-form-urlencoded'})
    
    if response.status_code == 200:
        return response.json().get('access_token')
    else:
        print(f"Error getting token: {response.status_code}, {response.text}")
        return None

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ Power BI
def is_phone_number_in_power_bi(phone_number):
    token = get_power_bi_token()
    if not token:
        return False, None, None  # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å —É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    # –û–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø–∏—Ç: –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –∞ –Ω–µ –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω–∏—Ö
    query_data = {
        "queries": [
            {
                "query": f"""
                    EVALUATE 
                    SELECTCOLUMNS(
                        Employees,
                        "Employee", Employees[Employee],
                        "PhoneNumber", Employees[PhoneNumberTelegram],
                        "Status", Employees[Status]  -- –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å!
                    )
                """
            }
        ],
        "serializerSettings": {
            "includeNulls": True
        }
    }

    response = requests.post(power_bi_url, headers=headers, json=query_data)

    if response.status_code == 200:
        data = response.json()
        if 'results' in data and len(data['results']) > 0 and 'tables' in data['results'][0] and len(data['results'][0]['tables']) > 0:
            rows = data['results'][0]['tables'][0].get('rows', [])
            if rows:
                phone_map = {normalize_phone_number(row.get('[PhoneNumberTelegram]', '')): (row.get('[Employee]', ''), row.get('[Status]', '')) for row in rows}

                normalized_phone_number = normalize_phone_number(phone_number)

                if normalized_phone_number in phone_map:
                    employee_name, status = phone_map[normalized_phone_number]
                    return status == "–ê–∫—Ç–∏–≤–Ω–∏–π", employee_name, status  # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å!
                else:
                    return False, None, None
        return False, None, None
    else:
        print(f"Error executing query: {response.status_code}, {response.text}")
        return False, None, None


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –∑–∞–ø–∏—Å—É –≤ –±–∞–∑—É
def verify_and_add_user(phone_number, telegram_id, telegram_name):
    """
    1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Power BI.
    2. –Ø–∫—â–æ –∑–∞–ø–∏—Å –∑–Ω–∞–π–¥–µ–Ω–æ ‚Üí –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –≤ –ë–î.
    3. –Ø–∫—â–æ –∑–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Üí –∑–∞–ø–∏—Å—É—î `deleted`.
    4. –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å —É –ë–î –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ Power BI ‚Üí –æ–Ω–æ–≤–ª—é—î –π–æ–≥–æ.
    """

    is_active, employee_name, status_from_power_bi = is_phone_number_in_power_bi(phone_number)

    # –Ø–∫—â–æ —ñ–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Power BI, –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ –∑ –ë–î
    if not employee_name:
        employee_name = get_employee_name(phone_number)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
    new_status = "active" if status_from_power_bi == "–ê–∫—Ç–∏–≤–Ω–∏–π" else "deleted"

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —É –ë–î
    current_status = get_user_status(phone_number)

    # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å —É –ë–î –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î Power BI, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
    if current_status != new_status:
        add_telegram_user(phone_number, telegram_id, telegram_name, employee_name, new_status)
        print(f"üîÑ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: {phone_number} ‚Üí {new_status}")
    else:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –±–µ–∑ –∑–º—ñ–Ω: {phone_number} ‚Üí {current_status}")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –¥–µ–±—ñ—Ç–æ—Ä–∫—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
def get_user_debt_data(manager_name):
    token = get_power_bi_token()
    if not token:
        return None
    
    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    query_data = {
        "queries": [
            {
                "query": f"""
                    EVALUATE 
                    SELECTCOLUMNS(
                        FILTER(
                            Deb,
                            Deb[Manager] = "{manager_name}" && Deb[Inform] <> 1
                        ),
                        "Client", Deb[Client],
                        "Sum_$", Deb[Sum_$],
                        "Manager", Deb[Manager],
                        "PlanDatePay", Deb[PlanDatePay],
                        "Account", Deb[Account],
                        "Deal", Deb[Deal],
                        "AccountDate",  Deb[AccountDate]
                    )
                """
            }
        ],
        "serializerSettings": {
            "includeNulls": True
        }
    }
    
    response = requests.post(power_bi_url, headers=headers, json=query_data)
    
    if response.status_code == 200:
        data = response.json()
        rows = data['results'][0]['tables'][0].get('rows', [])
        return rows
    else:
        print(f"Error executing query: {response.status_code}, {response.text}")
        return None
