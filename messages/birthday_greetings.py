
import logging
from datetime import datetime
import requests
from telegram import Bot
from auth import get_power_bi_token
from db import get_active_users
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤ –∑ Power BI
def get_today_birthdays():
    token = get_power_bi_token()
    if not token:
        return []

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    today = datetime.today().strftime("%m-%d")
    query = f"""
        EVALUATE 
        SELECTCOLUMNS(
            FILTER(
                Employees,
                FORMAT(Employees[birthdayDate], "MM-dd") = "{today}"
            ),
            "Employee", Employees[Employee],
            "birthdayDate", Employees[birthdayDate]
        )
    """

    response = requests.post(url, headers=headers, json={
        "queries": [{"query": query}],
        "serializerSettings": {"includeNulls": True}
    })

    if response.status_code == 200:
        rows = response.json()['results'][0]['tables'][0].get('rows', [])
        return [{"Employee": row.get("[Employee]")} for row in rows]
    else:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ Power BI: {response.status_code}, {response.text}")
        return []

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–±–∞–∂–∞–Ω–Ω—è
def generate_birthday_greeting(name):
    return (
        f"üéâ –ó –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, {name}!\n\n"
        "–ù–µ—Ö–∞–π —Ü–µ–π —Ä—ñ–∫ –±—É–¥–µ —Å–ø–æ–≤–Ω–µ–Ω–∏–π –Ω–æ–≤–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å, –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è —Ç–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤. "
        "–ë–∞–∂–∞—î–º–æ –º—ñ—Ü–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤‚Äô—è, –ª—é–±–æ–≤—ñ, —Ä–∞–¥–æ—Å—Ç—ñ –π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–∫—É! üéÇü•≥"
    )

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å
async def send_birthday_greetings():
    logging.info("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Å—å–æ–≥–æ–¥–Ω—ñ —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫–∏...")
    birthday_people = get_today_birthdays()
    if not birthday_people:
        logging.info("–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤.")
        return

    users = get_active_users()
    users_dict = {u["employee_name"]: u["telegram_id"] for u in users}

    for person in birthday_people:
        name = person.get("Employee")
        telegram_id = users_dict.get(name)

        if telegram_id:
            message = generate_birthday_greeting(name)
            try:
                await bot.send_message(chat_id=telegram_id, text=message)
                logging.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è {name}")
            except Exception as e:
                logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {name}: {e}")
        else:
            logging.info(f"{name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

