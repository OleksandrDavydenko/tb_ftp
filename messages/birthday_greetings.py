import logging
import os
import requests
from datetime import datetime
from telegram import Bot
from auth import get_power_bi_token
from db import get_active_users
from openai import AsyncOpenAI

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç—ñ–≤ —Ç–∞ API
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

bot = Bot(token=TELEGRAM_BOT_TOKEN)
gpt = AsyncOpenAI(api_key=OPENAI_API_KEY)

# üéÇ –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤ –∑ Power BI
def get_today_birthdays():
    token = get_power_bi_token()
    if not token:
        return []

    today = datetime.today().strftime("%m-%d")
    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    query = f"""
        EVALUATE 
        SELECTCOLUMNS(
            FILTER(
                Employees,
                FORMAT(Employees[birthdayDate], "MM-dd") = "{today}"
            ),
            "Employee", Employees[Employee],
            "birthdayDate", Employees[birthdayDate]
        )
    """

    response = requests.post(url, headers=headers, json={
        "queries": [{"query": query}],
        "serializerSettings": {"includeNulls": True}
    })

    if response.status_code == 200:
        rows = response.json()['results'][0]['tables'][0].get('rows', [])
        return [{"Employee": row.get("[Employee]")} for row in rows]
    else:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ Power BI: {response.status_code}, {response.text}")
        return []

# ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è AI-–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
async def generate_ai_birthday_greeting(name: str) -> str:
    prompt = (
        f"–°–∫–ª–∞–¥–∏ —Ç–µ–ø–ª–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ –π –¥—Ä—É–∂–Ω—î –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—è –Ω–∞ —ñ–º'—è {name}. "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É, –¥–æ–¥–∞–π —Ç—Ä–æ—Ö–∏ –≥—É–º–æ—Ä—É —Ç–∞ –µ–º–æ–¥–∑—ñ, –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –ª—é–¥–∏–Ω–∏ –Ω–∞ —Ç–∏."
    )

    try:
        response = await gpt.chat.completions.create(
            model="gpt-3.5-turbo",  # üîÑ –¢–≤–æ—è –º–æ–¥–µ–ª—å
            messages=[{"role": "user", "content": prompt}],
            temperature=0.85
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {name}: {e}")
        return f"üéâ {name}, –∑ –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! –ë–∞–∂–∞—é —â–∞—Å—Ç—è, –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è! üéÇ"

# üì¨ –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å
async def send_birthday_greetings():
    logging.info("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Å—å–æ–≥–æ–¥–Ω—ñ —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫–∏...")
    birthday_people = get_today_birthdays()
    if not birthday_people:
        logging.info("–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤.")
        return

    users = get_active_users()
    users_dict = {u["employee_name"]: u["telegram_id"] for u in users}

    for person in birthday_people:
        name = person.get("Employee")
        telegram_id = users_dict.get(name)

        if telegram_id:
            try:
                message = await generate_ai_birthday_greeting(name)
                await bot.send_message(chat_id=telegram_id, text=message)
                logging.info(f"üéâ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ AI-–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è {name}")
            except Exception as e:
                logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {name}: {e}")
        else:
            logging.info(f"üë§ {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
