import logging
import os
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Bot
from db import get_active_users
from pytz import timezone
from apscheduler.events import EVENT_JOB_EXECUTED  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø–æ–¥—ñ—é

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
KEY = os.getenv('TELEGRAM_BOT_TOKEN')
bot = Bot(token=KEY)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –°–ø–∏—Å–æ–∫ –¥–µ—Ä–∂–∞–≤–Ω–∏—Ö —Å–≤—è—Ç –≤ –£–∫—Ä–∞—ó–Ω—ñ (—Ñ–æ—Ä–º–∞—Ç: MM-DD)
HOLIDAYS = [
    "01-01",  # –ù–æ–≤–∏–π —Ä—ñ–∫
    "25-12",  # –†—ñ–∑–¥–≤–æ –•—Ä–∏—Å—Ç–æ–≤–µ
    "08-03",  # –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∂—ñ–Ω–æ—á–∏–π –¥–µ–Ω—å
    "01-05",  # –î–µ–Ω—å –ø—Ä–∞—Ü—ñ
    "09-05",  # –î–µ–Ω—å –ø–µ—Ä–µ–º–æ–≥–∏
    "28-06",  # –î–µ–Ω—å –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—ó –£–∫—Ä–∞—ó–Ω–∏
    "24-08",  # –î–µ–Ω—å –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –£–∫—Ä–∞—ó–Ω–∏
    "14-10",  # –î–µ–Ω—å –∑–∞—Ö–∏—Å–Ω–∏–∫—ñ–≤ —ñ –∑–∞—Ö–∏—Å–Ω–∏—Ü—å –£–∫—Ä–∞—ó–Ω–∏
]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –Ω–∞–∑–≤–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è
def get_previous_month():
    current_month = datetime.now().month
    previous_month = current_month - 1 if current_month > 1 else 12
    months_ua = [
        "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
        "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
    ]
    return months_ua[previous_month - 1]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –¥–µ–Ω—å –≤–∏—Ö—ñ–¥–Ω–∏–º –∞–±–æ —Å–≤—è—Ç–∫–æ–≤–∏–º
def is_holiday_or_weekend(date):
    return date.weekday() >= 5 or date.strftime("%m-%d") in HOLIDAYS

# –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è
def get_next_workday(date):
    while is_holiday_or_weekend(date):
        date += timedelta(days=1)
    return date

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
async def send_reminder_to_all_users():
    users = get_active_users()
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å —Ç–∞ –¥–∞—Ç—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    previous_month_name = get_previous_month()
    now = datetime.now()
    reminder_date = f"07.{now.strftime('%m')}"
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = (
        f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n"
        f"–ö–æ–ª–µ–≥–∏, –∑–∞–∫—Ä–∏–≤–∞—î–º–æ {previous_month_name.upper()} –º—ñ—Å—è—Ü—å üí™\n"
        f"–ü—Ä–æ—à—É —É—Å—ñ—Ö –≤ —Ç–µ—Ä–º—ñ–Ω –¥–æ {reminder_date} –≤–∫–ª—é—á–Ω–æ, –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–≤–æ—ó —É–≥–æ–¥–∏ –≤ –ï–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ñ.\n\n"
        "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è."
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    for user in users:
        try:
            await bot.send_message(chat_id=user['telegram_id'], text=message)
            logging.info(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {user['telegram_name']}")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['telegram_name']}: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å
def reschedule_next_month(scheduler):
    now = datetime.now(timezone('Europe/Kiev'))
    first_day_next_month = datetime(
        now.year + (now.month // 12), 
        (now.month % 12) + 1, 
        1, 
        10, 
        0, 
        tzinfo=timezone('Europe/Kiev')
    )
    next_workday = get_next_workday(first_day_next_month)
    
    scheduler.add_job(
        send_reminder_to_all_users,
        'date',
        run_date=next_workday,
        misfire_grace_time=60,
        timezone='Europe/Kiev',
        id=f"monthly_reminder_{next_workday.strftime('%Y%m%d')}"
    )

    logging.info(
        f"–ù–∞—Å—Ç—É–ø–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ {next_workday.strftime('%Y-%m-%d %H:%M')} –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º."
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —â–æ–º—ñ—Å—è—á–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è

def schedule_monthly_reminder(scheduler):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ 1 —á–∏—Å–ª–æ –º—ñ—Å—è—Ü—è —î –≤–∏—Ö—ñ–¥–Ω–∏–º, —ñ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–∞–ø—É—Å–∫ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å
    now = datetime.now(timezone('Europe/Kiev'))
    first_day_of_month = datetime(now.year, now.month, 1, 16, 0, tzinfo=timezone('Europe/Kiev'))
    next_workday = get_next_workday(first_day_of_month)

    # –î–æ–¥–∞—î–º–æ –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    scheduler.add_job(
        send_reminder_to_all_users,
        'date',
        run_date=next_workday,
        misfire_grace_time=60,
        timezone='Europe/Kiev',
        id=f"monthly_reminder_{next_workday.strftime('%Y%m%d')}"
    )

    logging.info(
        f"–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —â–æ–º—ñ—Å—è—á–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–∞ {next_workday.strftime('%Y-%m-%d %H:%M')} –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º."
    )

    # –ü—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —ó—ó –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å
    scheduler.add_listener(
        lambda event: reschedule_next_month(scheduler) if event.job_id.startswith("monthly_reminder_") else None,
        EVENT_JOB_EXECUTED  # –í–∫–∞–∑—É—î–º–æ –ø–æ–¥—ñ—é
    )
