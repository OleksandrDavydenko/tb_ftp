import psycopg2
import os
import logging
import requests
from collections import defaultdict
from telegram import Bot
from datetime import datetime
from auth import get_power_bi_token  # <-- –¥–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –¥–ª—è PBI

KEY = os.getenv('TELEGRAM_BOT_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

# –ú–∞–ø–∏ –Ω–∞–∑–≤ —Ç–∏–ø—ñ–≤
TYPE_UA = {
    'salary': '–û–∫–ª–∞–¥',
    'bonus':  '–ë–æ–Ω—É—Å',
    'prize':  '–ü—Ä–µ–º—ñ—è',
}

# –£ —Ä–æ–¥–æ–≤–æ–º—É –≤—ñ–¥–º—ñ–Ω–∫—É –¥–ª—è —Ñ—Ä–∞–∑–∏ ‚Äú–≤–∏–ø–ª–∞—Ç–∞ –û–∫–ª–∞–¥—É/–ë–æ–Ω—É—Å—É/–ü—Ä–µ–º—ñ—ó‚Äù
TYPE_GENITIVE_UA = {
    'salary': '–û–∫–ª–∞–¥—É',
    'bonus':  '–ë–æ–Ω—É—Å—É',
    'prize':  '–ü—Ä–µ–º—ñ—ó',
}

MONTHS_UA = {
    "01": "–°—ñ—á–µ–Ω—å", "02": "–õ—é—Ç–∏–π", "03": "–ë–µ—Ä–µ–∑–µ–Ω—å", "04": "–ö–≤—ñ—Ç–µ–Ω—å",
    "05": "–¢—Ä–∞–≤–µ–Ω—å", "06": "–ß–µ—Ä–≤–µ–Ω—å", "07": "–õ–∏–ø–µ–Ω—å", "08": "–°–µ—Ä–ø–µ–Ω—å",
    "09": "–í–µ—Ä–µ—Å–µ–Ω—å", "10": "–ñ–æ–≤—Ç–µ–Ω—å", "11": "–õ–∏—Å—Ç–æ–ø–∞–¥", "12": "–ì—Ä—É–¥–µ–Ω—å"
}

def _format_month(raw_month: str) -> str:
    # –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ 'YYYY-MM-DD' —ñ 'YYYY-MM'
    for fmt in ("%Y-%m-%d", "%Y-%m"):
        try:
            parsed = datetime.strptime(raw_month, fmt)
            return MONTHS_UA.get(f"{parsed.month:02d}", raw_month)
        except ValueError:
            continue
    return raw_month

def _fetch_pbi_payment_lines(employee_name: str, payment_number: str):
    """
    –¢—è–≥–Ω–µ–º–æ –∑ Power BI –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—é –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É:
    - –ú—ñ—Å—è—Ü—å –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
    - –°—É–º–∞ UAH/USD
    - –¢–∏–ø (character): salary/bonus/prize
    –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤-—Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∞–±–æ None, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è.
    """
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Power BI —É check_new_payments.")
        return None

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    # –ù–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±–µ—Ä—É—Ç—å—Å—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –¥—É–∂–∫–∏.
    # –í–∞–∂–ª–∏–≤–æ: —É –≤–∞—à—ñ–π –º–æ–¥–µ–ª—ñ —Ç–∞–±–ª–∏—Ü—ñ SalaryPayment –º–∞—î –±—É—Ç–∏ –∫–æ–ª–æ–Ω–∫–∞ –∑ —Ç–∏–ø–æ–º (character/Type).
    # –Ø–∫—â–æ –ø–æ–ª–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è —ñ–Ω–∞–∫—à–µ ‚Äî –∑–∞–º—ñ–Ω—ñ—Ç—å SalaryPayment[character] –Ω–∏–∂—á–µ.
    query_data = {
        "queries": [
            {
                "query": f"""
                    EVALUATE 
                    SELECTCOLUMNS(
                        FILTER(
                            SalaryPayment,
                            SalaryPayment[Employee] = "{employee_name}" &&
                            SalaryPayment[DocNumber] = "{payment_number}"
                        ),
                        "–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è", SalaryPayment[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è],
                        "–°—É–º–∞ UAH",          SalaryPayment[SUM_UAH],
                        "–°—É–º–∞ USD",          SalaryPayment[SUM_USD],
                        "–¢–∏–ø",               SalaryPayment[character]
                    )
                """
            }
        ],
        "serializerSettings": {"includeNulls": True}
    }

    try:
        resp = requests.post(power_bi_url, headers=headers, json=query_data, timeout=30)
        if resp.status_code != 200:
            logging.error(f"‚ùå Power BI error {resp.status_code}: {resp.text}")
            return None
        data = resp.json()
        rows = data['results'][0]['tables'][0].get('rows', [])
        return rows
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Power BI: {e}")
        return None

async def check_new_payments():
    logging.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ —Ä–æ–∑–ø–æ—á–∞—Ç–∞.")
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ö—Ä–æ–∫ 1: –∑–Ω–∞–π—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–∞—Ä–∏ payment_number + phone_number
    cursor.execute("""
    SELECT DISTINCT payment_number, phone_number
    FROM payments
    WHERE is_notified = FALSE
    """)
    payment_groups = cursor.fetchall()

    for payment_number, phone_number in payment_groups:
        # –ö—Ä–æ–∫ 1.1: –¥—ñ—Å—Ç–∞—î–º–æ employee_name (–ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É –≤ Power BI)
        cursor.execute("SELECT employee_name, telegram_id FROM users WHERE phone_number = %s", (phone_number,))
        u = cursor.fetchone()
        if not u:
            logging.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (employee_name/telegram_id) –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone_number}")
            continue
        employee_name, telegram_id = u[0], u[1]

        # –ö—Ä–æ–∫ 2: –¥—ñ—Å—Ç–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ —ñ–∑ –ë–î –ø–æ —Ü—ñ–π –ø–∞—Ä—ñ (–¥–ª—è fallback —ñ –¥–ª—è –≤–∞–ª—é—Ç–∏/–¥–∞—Ç–∏)
        cursor.execute("""
        SELECT phone_number, amount, currency, payment_date, payment_number, accrual_month
        FROM payments
        WHERE payment_number = %s AND phone_number = %s
        """, (payment_number, phone_number))
        payments = cursor.fetchall()
        if not payments:
            continue

        # –ë–∞–∑–æ–≤—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –∑ –ë–î (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ PBI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)
        currency = payments[0][2]
        payment_date = payments[0][3]

        # ---- –û—Å–Ω–æ–≤–Ω–∏–π —à–ª—è—Ö: –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ Power BI —Ç–∏–ø–∏ + —Å—É–º–∏ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö ----
        pbi_rows = _fetch_pbi_payment_lines(employee_name, payment_number)

        if pbi_rows:
            # –ê–≥—Ä–µ–≥—É—î–º–æ —Å—É–º–∏ –∑–∞ (—Ç–∏–ø -> –º—ñ—Å—è—Ü—å)
            amounts_by_type_and_month = defaultdict(lambda: defaultdict(float))
            total_by_type = defaultdict(float)
            any_currency = None
            for r in pbi_rows:
                # –ö–ª—é—á—ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –¥—É–∂–∫–∞–º–∏
                month_raw = (r.get("[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]", "") or "").strip()
                amount_uah = float(r.get("[–°—É–º–∞ UAH]", 0) or 0)
                amount_usd = float(r.get("[–°—É–º–∞ USD]", 0) or 0)
                pay_type = (r.get("[–¢–∏–ø]", "") or "").strip().lower()  # 'salary'/'bonus'/'prize'

                # –í–∞–ª—é—Ç–∞ —è–∫ —É –≤–∞—à—ñ–π —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: —è–∫—â–æ USD != 0 -> USD, —ñ–Ω–∞–∫—à–µ UAH
                if abs(amount_usd) > 0:
                    amt, cur = amount_usd, "USD"
                else:
                    amt, cur = amount_uah, "UAH"

                any_currency = any_currency or cur
                amounts_by_type_and_month[pay_type][month_raw] += amt
                total_by_type[pay_type] += amt

            # –Ø–∫—â–æ Power BI –¥–∞–≤ –Ω–∞–º —Ö–æ—á —â–æ—Å—å ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ‚Äú—Ä–æ–∑—É–º–Ω–µ‚Äù –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∏–ø–æ–º
            await _send_notification_with_type(
                telegram_id=telegram_id,
                amounts_by_type_and_month=amounts_by_type_and_month,
                total_by_type=total_by_type,
                currency=any_currency or currency,
                payment_number=payment_number,
                payment_date=payment_date
            )
        else:
            # ---- Fallback: —è–∫ –±—É–ª–æ —Ä–∞–Ω—ñ—à–µ (–±–µ–∑ —Ç–∏–ø—ñ–≤) ----
            amounts_by_month = defaultdict(float)
            for p in payments:
                accrual_month = p[5]
                amounts_by_month[accrual_month] += float(p[1])
            await _send_notification_simple(
                telegram_id=telegram_id,
                amounts_by_month=amounts_by_month,
                currency=currency,
                payment_number=payment_number,
                payment_date=payment_date
            )

        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ü—ñ –ø–ª–∞—Ç–µ–∂—ñ —è–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ
        cursor.execute("""
        UPDATE payments
        SET is_notified = TRUE
        WHERE payment_number = %s AND phone_number = %s
        """, (payment_number, phone_number))

    conn.commit()
    cursor.close()
    conn.close()

async def _send_notification_with_type(telegram_id, amounts_by_type_and_month, total_by_type, currency, payment_number, payment_date):
    """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–º —Ç–∏–ø–æ–º(–∞–º–∏)."""
    bot = Bot(token=KEY)
    formatted_date = payment_date.strftime('%d.%m.%Y')
    header = f"üí∏ *–ó–¥—ñ–π—Å–Ω–µ–Ω–∞ –≤–∏–ø–ª–∞—Ç–∞!*\nüìÑ *–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ:* {payment_number} –≤—ñ–¥ {formatted_date}\n"

    present_types = [t for t, s in total_by_type.items() if s > 0]
    present_types = [t for t in present_types if t]  # –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø—É—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è

    if len(present_types) == 1:
        t = present_types[0]
        kind_line = f"üè∑Ô∏è –¶–µ –≤–∏–ø–ª–∞—Ç–∞ {TYPE_GENITIVE_UA.get(t, '–∑–∞—Ä–ø–ª–∞—Ç–∏')}.\n"

        months_map = amounts_by_type_and_month[t]
        # –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —ñ –≥–∞—Ä–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—ñ–æ–¥—ñ–≤
        lines = []
        total_amount = 0.0
        for m, amt in months_map.items():
            lines.append(f"‚Ä¢ {_format_month(m)} ‚Äì {amt:.2f} {currency}")
            total_amount += amt

        body = (
            f"{kind_line}\n"
            f"üìÖ *–ü–µ—Ä—ñ–æ–¥–∏ —Ç–∞ —Å—É–º–∏:*\n" + "\n".join(lines) +
            f"\n\nüí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {total_amount:.2f} {currency}"
        )
        msg = header + "\n" + body
    else:
        # –ö—ñ–ª—å–∫–∞ —Ç–∏–ø—ñ–≤ ‚Äî —Ä–æ–∑–¥—ñ–ª–∞–º–∏
        sections = []
        grand_total = 0.0
        order = ['salary', 'prize', 'bonus']  # —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫
        for t in order:
            months_map = amounts_by_type_and_month.get(t, {})
            if not months_map:
                continue
            title = f"‚Äî *{TYPE_UA.get(t, t.capitalize())}* ‚Äî"
            lines = [f"‚Ä¢ {_format_month(m)} ‚Äì {amt:.2f} {currency}" for m, amt in months_map.items()]
            subtotal = sum(months_map.values())
            grand_total += subtotal
            sections.append(f"{title}\n" + "\n".join(lines) + f"\n_–†–∞–∑–æ–º –ø–æ {TYPE_UA.get(t, t)}:_ *{subtotal:.2f} {currency}*")

        if not sections:
            # –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Ç–∏–ø—ñ–≤ –Ω–µ–º–∞—î (—É—Å—ñ –ø—É—Å—Ç—ñ) ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            sections.append("_–¢–∏–ø –≤–∏–ø–ª–∞—Ç–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ —É Power BI._")

        body = (
            "üè∑Ô∏è –£ –¥–æ–∫—É–º–µ–Ω—Ç—ñ —î –∫—ñ–ª—å–∫–∞ —Ç–∏–ø—ñ–≤ –≤–∏–ø–ª–∞—Ç.\n\n" +
            "\n\n".join(sections) +
            f"\n\nüí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É:* {grand_total:.2f} {currency}"
        )
        msg = header + "\n" + body

    try:
        await bot.send_message(chat_id=telegram_id, text=msg, parse_mode="Markdown")
        logging.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–∑ —Ç–∏–ø–æ–º) –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {msg}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")

async def _send_notification_simple(telegram_id, amounts_by_month, currency, payment_number, payment_date):
    """Fallback-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–∏–ø—ñ–≤ (—è–∫ –±—É–ª–æ —Ä–∞–Ω—ñ—à–µ)."""
    bot = Bot(token=KEY)

    # –ì–∞—Ä–Ω—ñ –Ω–∞–∑–≤–∏ –º—ñ—Å—è—Ü—ñ–≤
    formatted_periods = {}
    for raw_month, amount in amounts_by_month.items():
        try:
            parsed_date = datetime.strptime(raw_month, "%Y-%m-%d")
            month_name = MONTHS_UA.get(f"{parsed_date.month:02d}", raw_month)
            formatted_periods[month_name] = amount
        except ValueError:
            formatted_periods[raw_month] = amount

    details = "\n".join([f"‚Ä¢ {month} ‚Äì {amount:.2f} {currency}" for month, amount in formatted_periods.items()])
    total_amount = sum(amounts_by_month.values())
    formatted_date = payment_date.strftime('%d.%m.%Y')

    message = (
        f"üí∏ *–ó–¥—ñ–π—Å–Ω–µ–Ω–∞ –≤–∏–ø–ª–∞—Ç–∞!*\n"
        f"üìÑ *–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ:* {payment_number} –≤—ñ–¥ {formatted_date}\n\n"
        f"üìÖ *–ü–µ—Ä—ñ–æ–¥–∏ —Ç–∞ —Å—É–º–∏:*\n"
        f"{details}\n\n"
        f"üí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {total_amount:.2f} {currency}"
    )

    try:
        await bot.send_message(chat_id=telegram_id, text=message, parse_mode="Markdown")
        logging.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è (fallback) –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
