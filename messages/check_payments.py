import psycopg2
import os
import logging
from collections import defaultdict
from telegram import Bot

KEY = os.getenv('TELEGRAM_BOT_TOKEN')
DATABASE_URL = os.getenv('DATABASE_URL')

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

async def check_new_payments():
    logging.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ —Ä–æ–∑–ø–æ—á–∞—Ç–∞.")
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ö—Ä–æ–∫ 1: –æ—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –Ω–æ–º–µ—Ä–∏ –ø–ª–∞—Ç—ñ–∂–æ–∫, —è–∫—ñ –º–∞—é—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –∑ is_notified = FALSE
    cursor.execute("""
    SELECT DISTINCT payment_number
    FROM payments
    WHERE is_notified = FALSE
    """)
    payment_numbers_to_notify = [row[0] for row in cursor.fetchall()]

    for payment_number in payment_numbers_to_notify:
        # –ö—Ä–æ–∫ 2: –¥—ñ—Å—Ç–∞—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –ø–æ —Ü—å–æ–º—É –ø–ª–∞—Ç—ñ–∂–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
        cursor.execute("""
        SELECT phone_number, amount, currency, payment_date, payment_number, accrual_month
        FROM payments
        WHERE payment_number = %s
        """, (payment_number,))
        payments = cursor.fetchall()

        if not payments:
            continue

        phone_number = payments[0][0]
        currency = payments[0][2]

        # –û—Ç—Ä–∏–º—É—î–º–æ Telegram ID
        cursor.execute("SELECT telegram_id FROM users WHERE phone_number = %s", (phone_number,))
        user_data = cursor.fetchone()

        if not user_data:
            logging.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Telegram ID –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone_number}")
            continue

        telegram_id = user_data[0]

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—É–º–∏ –ø–æ –∫–æ–∂–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—É
        amounts_by_month = defaultdict(float)
        for p in payments:
            accrual_month = p[5]
            amounts_by_month[accrual_month] += float(p[1])

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —É—Å—ñ—î—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        await send_notification(telegram_id, amounts_by_month, currency, payment_number)

        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —Ü—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: is_notified = TRUE
        cursor.execute("""
        UPDATE payments
        SET is_notified = TRUE
        WHERE payment_number = %s
        """, (payment_number,))

    conn.commit()
    cursor.close()
    conn.close()

async def send_notification(telegram_id, amounts_by_month, currency, payment_number):
    try:
        bot = Bot(token=KEY)

        details = "\n".join(
            [f"‚Ä¢ {month} ‚Äì {amount:.2f} {currency}" for month, amount in amounts_by_month.items()]
        )
        total_amount = sum(amounts_by_month.values())

        message = (
            f"üí∏ *–ó–¥—ñ–π—Å–Ω–µ–Ω–∞ –≤–∏–ø–ª–∞—Ç–∞!*\n"
            f"üìÑ *–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ:* {payment_number}\n\n"
            f"üìÖ *–ü–µ—Ä—ñ–æ–¥–∏ —Ç–∞ —Å—É–º–∏:*\n"
            f"{details}\n\n"
            f"üí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {total_amount:.2f} {currency}"
        )

        await bot.send_message(chat_id=telegram_id, text=message, parse_mode="Markdown")
        logging.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
