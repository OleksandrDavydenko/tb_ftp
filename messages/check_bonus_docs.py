import os
import logging
import requests
from telegram import Bot
from auth import get_power_bi_token
from db import get_db_connection, mark_bonus_docs_notified, get_active_users

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –¢–æ–∫–µ–Ω–∏
KEY = os.getenv('TELEGRAM_BOT_TOKEN')
DATASET_ID = os.getenv("PBI_DATASET_ID", "8b80be15-7b31-49e4-bc85-8b37a0d98f1c")


if not DATASET_ID:
    logging.error("‚ùå PBI_DATASET_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

if not KEY:
    logging.warning("‚ö†Ô∏è TELEGRAM_TOKEN –ø–æ—Ä–æ–∂–Ω—ñ–π: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ.")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
def get_unnotified_docs():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT doc_number, period FROM bonus_docs WHERE is_notified = FALSE")
    docs = cursor.fetchall()
    cursor.close()
    conn.close()
    logging.info(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ is_notified = FALSE: {len(docs)}")
    return docs  # [(doc_number, period), ...]

# DAX-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
import os
import logging
import requests
from auth import get_power_bi_token

DATASET_ID = os.getenv("PBI_DATASET_ID")
BONUSES_TBL = os.getenv("PBI_BONUSES_TABLE", "").strip()  # ‚Üê —è–∫—â–æ –∑–∞–¥–∞–Ω–æ, –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ó—ó

def fetch_employees_for_doc(doc_number: str) -> list[str]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö Employee –¥–ª—è DocNumber, –ø—Ä–æ–±—É—é—á–∏ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ DAX.
    –Ø–∫—â–æ —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ –∑–∞–¥–∞–Ω–æ PBI_BONUSES_TABLE ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó –Ω–∞–ø—Ä—è–º—É.
    """
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Power BI —Ç–æ–∫–µ–Ω (–ø–µ—Ä–µ–≤—ñ—Ä PASSWORD / auth.py).")
        return []

    url = f"https://api.powerbi.com/v1.0/myorg/datasets/{DATASET_ID}/executeQueries"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    safe_doc = doc_number.replace('"', '""')

    # —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—é —è–≤–Ω–æ –¥–∞–ª–∏ —á–µ—Ä–µ–∑ ENV ‚Äî —Ñ–æ—Ä–º—É—î–º–æ —Ä—ñ–≤–Ω–æ –ø–æ –Ω—ñ–π
    if BONUSES_TBL:
        dax_env = f"""
        EVALUATE
        DISTINCT(
            SELECTCOLUMNS(
                FILTER('{BONUSES_TBL}', '{BONUSES_TBL}'[DocNumber] = "{safe_doc}"),
                "Employee", '{BONUSES_TBL}'[Employee]
            )
        )
        """
        return _try_dax(url, headers, dax_env, label=f"ENV '{BONUSES_TBL}'")

    # —ñ–Ω–∞–∫—à–µ ‚Äî –ø—Ä–æ–±—É—î–º–æ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ—à–∏—Ä–µ–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
    variants = [
        # 1) –±–µ–∑ –ª–∞–ø–æ–∫ (—è–∫ —É —Ç–µ–±–µ –ª–æ–∫–∞–ª—å–Ω–æ)
        """
        EVALUATE
        DISTINCT(
            SELECTCOLUMNS(
                FILTER(BonusesDetails, BonusesDetails[DocNumber] = "{doc}"),
                "Employee", BonusesDetails[Employee]
            )
        )
        """,
        # 2) –∑ –ª–∞–ø–∫–∞–º–∏ –Ω–∞–≤–∫–æ–ª–æ –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ
        """
        EVALUATE
        DISTINCT(
            SELECTCOLUMNS(
                FILTER('BonusesDetails', 'BonusesDetails'[DocNumber] = "{doc}"),
                "Employee", 'BonusesDetails'[Employee]
            )
        )
        """,
        # 3) SUMMARIZECOLUMNS ‚Äî —ñ–Ω–∫–æ–ª–∏ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–µ
        """
        EVALUATE
        SUMMARIZECOLUMNS(
            'BonusesDetails'[Employee],
            FILTER('BonusesDetails', 'BonusesDetails'[DocNumber] = "{doc}")
        )
        """,
        # 4) –ù–∞ –≤–∏–ø–∞–¥–æ–∫ —ñ–Ω—à–æ—ó –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—ñ (–ø–æ—à–∏—Ä–µ–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏)
        """
        EVALUATE
        DISTINCT(
            SELECTCOLUMNS(
                FILTER('Bonuses Details', 'Bonuses Details'[DocNumber] = "{doc}"),
                "Employee", 'Bonuses Details'[Employee]
            )
        )
        """,
        """
        EVALUATE
        DISTINCT(
            SELECTCOLUMNS(
                FILTER('3330/3320', '3330/3320'[DocNumber] = "{doc}"),
                "Employee", '3330/3320'[Employee]
            )
        )
        """,
    ]

    for i, tpl in enumerate(variants, start=1):
        dax = tpl.format(doc=safe_doc)
        res = _try_dax(url, headers, dax, label=f"variant #{i}")
        if res:
            return res

    logging.error(
        "‚ùå –£—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ DAX –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—è –ø–æ–º–∏–ª–∫–æ—é/–ø—É—Å—Ç–æ. "
        "–ô–º–æ–≤—ñ—Ä–Ω–æ, —É –¥–∞—Ç–∞—Å–µ—Ç—ñ —ñ–Ω—à–∞ –Ω–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ –∞–±–æ –∫–æ–ª–æ–Ω–æ–∫. "
        "–ú–æ–∂–µ—à –∑–∞–¥–∞—Ç–∏ —ó—ó —è–≤–Ω–æ —á–µ—Ä–µ–∑ ENV PBI_BONUSES_TABLE."
    )
    return []


def _try_dax(url: str, headers: dict, dax: str, label: str) -> list[str] | None:
    logging.info(f"üì§ DAX {label}:\n{dax.strip()}")
    payload = {"queries": [{"query": dax}], "serializerSettings": {"includeNulls": True}}
    try:
        r = requests.post(url, headers=headers, json=payload, timeout=60)
    except Exception as e:
        logging.error(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞ ({label}): {e}")
        return None

    if r.status_code != 200:
        # –≤–∞–∂–ª–∏–≤–æ –±–∞—á–∏—Ç–∏ –¢–ï–ö–°–¢ –ø–æ–º–∏–ª–∫–∏ 400 ‚Äî —Ç–∞–º —á–∞—Å—Ç–æ –ø—Ä—è–º–æ –Ω–∞–ø–∏—Å–∞–Ω–æ, —è–∫–æ—ó —Ç–∞–±–ª–∏—Ü—ñ/–∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —ñ—Å–Ω—É—î
        logging.error(f"‚ùå PBI {label}: {r.status_code} ‚Äî {r.text}")
        return None

    try:
        data = r.json()
        rows = data.get("results", [{}])[0].get("tables", [{}])[0].get("rows", [])
        logging.info(f"üì¶ {label}: –æ—Ç—Ä–∏–º–∞–Ω–æ {len(rows)} —Ä—è–¥–∫—ñ–≤")
        employees = set()

        for row in rows:
            key_emp = next((k for k in row if "Employee" in k), None)
            if not key_emp:
                continue
            val = row.get(key_emp)
            if val:
                employees.add(str(val).strip())

        if employees:
            logging.info(f"üë• {label}: —É–Ω—ñ–∫–∞–ª—å–Ω—ñ Employee: {list(employees)}")
            return list(employees)
        else:
            logging.warning(f"‚ö†Ô∏è {label}: —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return []
    except Exception as e:
        logging.error(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ JSON ({label}): {e}")
        return None
