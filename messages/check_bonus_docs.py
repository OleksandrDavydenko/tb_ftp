# -*- coding: utf-8 -*-
"""
–ë–æ–Ω—É—Å-–¥–æ–∫—É–º–µ–Ω—Ç–∏: —à—É–∫–∞—î–º–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –¥–ª—è DocNumber —É Power BI
—ñ —Ä–æ–∑—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¢–Ü–õ–¨–ö–ò —Ç–∏–º, —Ö—Ç–æ —î –∞–∫—Ç–∏–≤–Ω–∏–º —É –Ω–∞—à—ñ–π –ë–î (users)
—Ç–∞ –º–∞—î telegram_id. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ employee_name.

–õ–æ–≥–∏ –ø–æ–∫–∞–∑—É—é—Ç—å:
- —Å–∫—ñ–ª—å–∫–∏ –Ω–µ–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤;
- —è–∫–∏–π DAX —à–ª–µ–º–æ;
- —Å–∫—ñ–ª—å–∫–∏ —Ä—è–¥–∫—ñ–≤ –ø–æ–≤–µ—Ä–Ω—É–≤ PBI;
- –∫–æ–≥–æ —Å–ø—ñ–≤—Å—Ç–∞–≤–∏–ª–∏ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏;
- –∫–æ–º—É —Ä–µ–∞–ª—å–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–æ—Å—å (–∑ message_id);
- —è–∫—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø–æ–º—ñ—á–µ–Ω—ñ —è–∫ is_notified.
"""

import os
import time
import logging
import requests
from typing import List, Dict, Any, Iterable

from telegram import Bot
from telegram.error import Forbidden, RetryAfter, TimedOut, NetworkError

from auth import get_power_bi_token
from db import get_db_connection, mark_bonus_docs_notified, get_active_users

# ---------------------------
# –õ–û–ì–£–í–ê–ù–ù–Ø
# ---------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# ---------------------------
# –ö–û–ù–§–Ü–ì
# ---------------------------
KEY = os.getenv("TELEGRAM_BOT_TOKEN")
DATASET_ID = os.getenv("PBI_DATASET_ID", "8b80be15-7b31-49e4-bc85-8b37a0d98f1c")

if not KEY:
    logging.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏–º—É—Ç—å—Å—è.")
BOT = Bot(token=KEY) if KEY else None

PBI_URL = f"https://api.powerbi.com/v1.0/myorg/datasets/{DATASET_ID}/executeQueries"
PBI_HEADERS = {"Content-Type": "application/json"}

# ---------------------------
# –ë–î
# ---------------------------
def get_unnotified_docs() -> List[tuple[str, str]]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ (doc_number, period) –¥–ª—è –∑–∞–ø–∏—Å—ñ–≤, –¥–µ is_notified = FALSE."""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT doc_number, period FROM bonus_docs WHERE is_notified = FALSE")
    docs = cur.fetchall()
    cur.close()
    conn.close()
    logging.info(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ is_notified=FALSE: {len(docs)}")
    return docs


# ---------------------------
# POWER BI
# ---------------------------
def _exec_pbi_dax(dax: str) -> Dict[str, Any] | None:
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Power BI —Ç–æ–∫–µ–Ω.")
        return None

    headers = {**PBI_HEADERS, "Authorization": f"Bearer {token}"}
    payload = {"queries": [{"query": dax}], "serializerSettings": {"includeNulls": True}}
    try:
        r = requests.post(PBI_URL, headers=headers, json=payload, timeout=60)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ PBI: {e}")
        return None

    if r.status_code != 200:
        logging.error(f"‚ùå Power BI –∑–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è: {r.status_code} ‚Äî {r.text}")
        return None

    try:
        return r.json()
    except Exception as e:
        logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥ PBI: {e}")
        return None


def fetch_employees_for_doc(doc_number: str) -> List[str]:
    """
    –¢—è–≥–Ω–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —ñ–º–µ–Ω–∞ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑ BonusesDetails –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ DocNumber.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω (Employee).
    """
    safe_doc = doc_number.replace('"', '""')
    dax = f"""
    EVALUATE
    DISTINCT(
        SELECTCOLUMNS(
            FILTER(BonusesDetails, BonusesDetails[DocNumber] = "{safe_doc}"),
            "Employee", BonusesDetails[Employee]
        )
    )
    """.strip()

    logging.info(f"üì§ DAX –¥–ª—è {doc_number}:\n{dax}")
    data = _exec_pbi_dax(dax)
    if not data:
        return []

    try:
        rows = data["results"][0]["tables"][0].get("rows", [])
    except Exception:
        rows = []

    logging.info(f"üì¶ Power BI –ø–æ–≤–µ—Ä–Ω—É–≤ {len(rows)} —Ä—è–¥–∫—ñ–≤ –¥–ª—è {doc_number}")

    employees: set[str] = set()
    for row in rows:
        # –ö–ª—é—á –º–æ–∂–µ –º–∞—Ç–∏ –≤–∏–≥–ª—è–¥ "Employee" –∞–±–æ "[Employee]" –∞–±–æ "BonusesDetails[Employee]"
        key = next((k for k in row if "Employee" in k), None)
        if key and row[key]:
            employees.add(str(row[key]).strip())

    return list(employees)


# ---------------------------
# –í–Ü–î–ü–†–ê–í–ö–ê –£ TELEGRAM
# ---------------------------
def _to_int(value: Any) -> int | None:
    try:
        return int(value)
    except Exception:
        return None


def send_notification(telegram_id: int | str, message: str, retries: int = 2) -> bool:
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫—ñ–ª—å–∫–æ–º–∞ —Å–ø—Ä–æ–±–∞–º–∏ —É –≤–∏–ø–∞–¥–∫—É —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫.
    –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.
    """
    if not BOT:
        return False

    chat_id = _to_int(telegram_id)
    if chat_id is None:
        logging.error(f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π telegram_id: {telegram_id!r}")
        return False

    attempt = 0
    while attempt <= retries:
        try:
            msg = BOT.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode="HTML",
                disable_notification=False,
            )
            mid = getattr(msg, "message_id", None)
            logging.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {chat_id}, message_id={mid}")
            return True

        except RetryAfter as e:
            attempt += 1
            wait_s = int(getattr(e, "retry_after", 2))
            logging.warning(f"‚è≥ FloodWait {wait_s}s –¥–ª—è {chat_id} (—Å–ø—Ä–æ–±–∞ {attempt}/{retries}).")
            time.sleep(wait_s)

        except Forbidden as e:
            logging.error(f"üö´ Forbidden –¥–ª—è {chat_id}: {e} (–±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π / –Ω–µ–º–∞—î /start)")
            return False

        except (TimedOut, NetworkError) as e:
            attempt += 1
            logging.warning(f"üåê –¢–∏–º—á–∞—Å–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {chat_id}: {e} (—Å–ø—Ä–æ–±–∞ {attempt}/{retries}).")
            time.sleep(1)

        except Exception as e:
            logging.error(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")
            return False

    return False


# ---------------------------
# –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê
# ---------------------------
def _unique(values: Iterable[Any]) -> List[Any]:
    seen = set()
    out = []
    for v in values:
        if v not in seen:
            out.append(v)
            seen.add(v)
    return out


def check_bonus_docs():
    """
    1) –ë–µ—Ä–µ–º–æ –≤—Å—ñ bonus_docs –∑ is_notified = FALSE
    2) –î–ª—è –∫–æ–∂–Ω–æ–≥–æ DocNumber –≤–∏—Ç—è–≥—É—î–º–æ –∑ PBI —Å–ø–∏—Å–æ–∫ Employee
    3) –°–ø—ñ–≤—Å—Ç–∞–≤–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ users (–ø–æ employee_name)
    4) –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∑–Ω–∞–π–¥–µ–Ω–∏–º
    5) –ü–æ–∑–Ω–∞—á–∞—î–º–æ is_notified –ª–∏—à–µ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –¥–µ –±—É–ª–∞ —Ö–æ—á –æ–¥–Ω–∞ —É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
    """
    logging.info("üì• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –±–æ–Ω—É—Å-–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")
    docs_to_check = get_unnotified_docs()
    if not docs_to_check:
        logging.info("‚ÑπÔ∏è –ù–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î.")
        return

    active_users = get_active_users()
    logging.info(f"üü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: {len(active_users)}")

    # –º–∞–ø–∏–º–æ –∑–∞ —ñ–º‚Äô—è–º
    active_by_name: Dict[str, Dict[str, Any]] = {
        str(u["employee_name"]).strip(): u for u in active_users
    }

    docs_to_mark: List[str] = []

    for doc_number, period in docs_to_check:
        logging.info(f"üîç –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_number} ‚Äî {period}")

        employees = fetch_employees_for_doc(doc_number)
        if not employees:
            logging.warning(f"‚ö†Ô∏è PBI –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –∂–æ–¥–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–ª—è {doc_number}")
            continue

        matched: List[Dict[str, Any]] = []
        for emp in employees:
            emp_clean = str(emp).strip()
            user = active_by_name.get(emp_clean)
            if user and user.get("telegram_id"):
                matched.append(user)
                logging.info(f"‚úÖ {emp_clean}: –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î ‚Üí telegram_id={user['telegram_id']}")
            elif user and not user.get("telegram_id"):
                logging.warning(f"‚ö†Ô∏è {emp_clean}: –Ω–µ–º–∞—î telegram_id —É –ë–î")
            else:
                logging.warning(f"‚ö†Ô∏è {emp_clean}: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Å–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö —É –ë–î")

        if not matched:
            logging.warning(f"‚ö†Ô∏è {doc_number}: –Ω–µ–º–∞—î –∫–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ ‚Äî —Å—Ç–∞—Ç—É—Å –ù–ï –æ–Ω–æ–≤–ª—é—é.")
            continue

        message = (
            "üìÑ –ó º—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤:\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä: <b>{doc_number}</b>\n"
            f"‚Ä¢ –ü–µ—Ä—ñ–æ–¥: <b>{period}</b>"
        )

        sent_any = False
        # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ª–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º telegram_id
        for tg_id in _unique(u["telegram_id"] for u in matched if u.get("telegram_id")):
            ok = send_notification(tg_id, message)
            sent_any = sent_any or ok
            time.sleep(0.03)  # –ª–µ–≥–∫–∏–π —Ç—Ä–æ—Ç–ª—ñ–Ω–≥ –ø—Ä–æ—Ç–∏ —Ñ–ª–∞–¥-–ª—ñ–º—ñ—Ç—ñ–≤

        if sent_any:
            docs_to_mark.append(doc_number)
        else:
            logging.warning(f"‚ö†Ô∏è {doc_number}: —É—Å—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–µ–≤–¥–∞–ª—ñ ‚Äî —Å—Ç–∞—Ç—É—Å –ù–ï –æ–Ω–æ–≤–ª—é—é.")

    if docs_to_mark:
        affected = mark_bonus_docs_notified(docs_to_mark)
        logging.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ is_notified –ø–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö: {affected}")
    else:
        logging.info("‚ÑπÔ∏è –ñ–æ–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ (—É—Å–ø—ñ—à–Ω–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫ –Ω–µ –±—É–ª–æ).")


