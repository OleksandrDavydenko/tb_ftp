import os
import logging
import requests
from telegram import Bot
from auth import get_power_bi_token
from db import get_db_connection, mark_bonus_docs_notified, get_active_users

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –¢–æ–∫–µ–Ω–∏
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
DATASET_ID = os.getenv("PBI_DATASET_ID")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
def get_unnotified_docs():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT doc_number, period FROM bonus_docs WHERE is_notified = FALSE")
    docs = cursor.fetchall()
    cursor.close()
    conn.close()
    logging.info(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ is_notified = FALSE: {len(docs)}")
    return docs

# DAX-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def fetch_employees_for_doc(doc_number):
    dax = f'''
    EVALUATE
    SUMMARIZECOLUMNS(
        BonusesDetails[Employee],
        FILTER(
            BonusesDetails,
            BonusesDetails[DocNumber] = "{doc_number}"
        )
    )
    '''

    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Power BI —Ç–æ–∫–µ–Ω.")
        return []

    url = f"https://api.powerbi.com/v1.0/myorg/datasets/{DATASET_ID}/executeQueries"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    payload = {"queries": [{"query": dax}], "serializerSettings": {"includeNulls": True}}

    logging.info(f"üì§ –ù–∞–¥—Å–∏–ª–∞—é DAX-–∑–∞–ø–∏—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_number}...")
    r = requests.post(url, headers=headers, json=payload)

    if r.status_code != 200:
        logging.error(f"‚ùå Power BI –∑–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è: {r.status_code} ‚Äî {r.text}")
        return []

    try:
        data = r.json()
        rows = data["results"][0]["tables"][0].get("rows", [])
        logging.info(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ {len(rows)} —Ä—è–¥–∫—ñ–≤ –∑ Power BI –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_number}")

        employees = set()
        for row in rows:
            # Power BI API —ñ–Ω–æ–¥—ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–ª—é—á –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö –¥—É–∂–æ–∫
            key = next((k for k in row if "Employee" in k), None)
            if key and row[key]:
                employees.add(row[key])

        logging.info(f"üë• –ó–Ω–∞–π–¥–µ–Ω—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏: {list(employees)}")
        return list(employees)

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Power BI: {e}")
        return []


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def send_notification(telegram_id, message):
    try:
        bot = Bot(token=BOT_TOKEN)
        bot.send_message(chat_id=telegram_id, text=message, parse_mode="HTML")
        logging.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ Telegram ID: {telegram_id}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram ID {telegram_id}: {e}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
def check_bonus_docs():
    logging.info("üì• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –±–æ–Ω—É—Å-–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")
    docs_to_check = get_unnotified_docs()
    if not docs_to_check:
        logging.info("‚ÑπÔ∏è –ù–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î.")
        return

    active_users = get_active_users()
    logging.info(f"üü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: {len(active_users)}")

    # –ü–æ–±—É–¥–æ–≤–∞ –º–∞–ø–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
    active_map = {user["employee_name"]: user for user in active_users}

    for doc_number, period in docs_to_check:
        logging.info(f"üîç –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_number} ‚Äî {period}")
        employees = fetch_employees_for_doc(doc_number)

        matched_users = []
        for emp in employees:
            if emp in active_map:
                matched_users.append(active_map[emp])
                logging.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞: {emp}")
            else:
                logging.warning(f"‚ö†Ô∏è –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ '{emp}' –Ω–µ–º–∞—î —Å–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö —É –ë–î")

        if not matched_users:
            logging.warning(f"‚ö†Ô∏è –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤.")
            continue

        message = (
            f"üìÑ –ó º—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤:\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä: <b>{doc_number}</b>\n"
            f"‚Ä¢ –ü–µ—Ä—ñ–æ–¥: <b>{period}</b>"
        )

        for user in matched_users:
            send_notification(user["telegram_id"], message)

    affected = mark_bonus_docs_notified([doc[0] for doc in docs_to_check])
    logging.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å—ñ–≤ is_notified: {affected}")
