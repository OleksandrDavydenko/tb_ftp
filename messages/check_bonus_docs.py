import os
import logging
import time
import requests
from telegram import Bot
from telegram.error import Forbidden, RetryAfter, TimedOut, NetworkError

from auth import get_power_bi_token
from db import get_db_connection, mark_bonus_docs_notified, get_active_users

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ‚úÖ –Ñ–¥–∏–Ω–∞ —É–∑–≥–æ–¥–∂–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ç–æ–∫–µ–Ω–æ–º
KEY = os.getenv("TELEGRAM_BOT_TOKEN")
DATASET_ID = os.getenv("PBI_DATASET_ID", "8b80be15-7b31-49e4-bc85-8b37a0d98f1c")

if not KEY:
    logging.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–µ –±—É–¥–µ.")
BOT = Bot(token=KEY) if KEY else None

def get_unnotified_docs():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT doc_number, period FROM bonus_docs WHERE is_notified = FALSE")
    docs = cur.fetchall()
    cur.close(); conn.close()
    logging.info(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ is_notified=FALSE: {len(docs)}")
    return docs

def fetch_employees_for_doc(doc_number: str):
    safe_doc = doc_number.replace('"', '""')
    dax = f'''
    EVALUATE
    DISTINCT(
        SELECTCOLUMNS(
            FILTER(BonusesDetails, BonusesDetails[DocNumber] = "{safe_doc}"),
            "Employee", BonusesDetails[Employee]
        )
    )
    '''
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Power BI —Ç–æ–∫–µ–Ω.")
        return []

    url = f"https://api.powerbi.com/v1.0/myorg/datasets/{DATASET_ID}/executeQueries"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    payload = {"queries": [{"query": dax}], "serializerSettings": {"includeNulls": True}}

    r = requests.post(url, headers=headers, json=payload, timeout=60)
    if r.status_code != 200:
        logging.error(f"‚ùå Power BI –∑–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è: {r.status_code} ‚Äî {r.text}")
        return []

    data = r.json()
    rows = data["results"][0]["tables"][0].get("rows", [])
    logging.info(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ {len(rows)} —Ä—è–¥–∫—ñ–≤ –∑ Power BI –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_number}")

    employees = set()
    for row in rows:
        key = next((k for k in row if "Employee" in k), None)
        if key and row[key]:
            employees.add(str(row[key]).strip())
    return list(employees)

# ‚úÖ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑ retry + –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –ª–æ–≥–∞–º–∏ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º True/False
def send_notification(telegram_id: int, message: str, retries: int = 2) -> bool:
    if not BOT:
        return False

    attempt = 0
    while attempt <= retries:
        try:
            msg = BOT.send_message(
                chat_id=int(telegram_id),
                text=message,
                parse_mode="HTML",
                disable_notification=False  # —Ö–æ—á–µ–º–æ push
            )
            # —è–∫—â–æ —Ü–µ PTB v13 ‚Äì msg –æ–±‚Äô—î–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π; v20 ‚Äì —Ü–µ –∫–æ—Ä—É—Ç–∏–Ω–∞ (–∞–ª–µ –≤ —Ç–µ–±–µ –≤–∂–µ –Ω–µ–º–∞—î warning-—ñ–≤)
            mid = getattr(msg, "message_id", None)
            logging.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {telegram_id}, message_id={mid}")
            return True

        except RetryAfter as e:
            attempt += 1
            wait_s = int(getattr(e, "retry_after", 2))
            logging.warning(f"‚è≥ FloodWait {wait_s}s –¥–ª—è {telegram_id} (—Å–ø—Ä–æ–±–∞ {attempt}/{retries}).")
            time.sleep(wait_s)
        except Forbidden as e:
            logging.error(f"üö´ Forbidden –¥–ª—è {telegram_id}: {e} (–±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π / –Ω–µ–º–∞ /start)")
            return False
        except (TimedOut, NetworkError) as e:
            attempt += 1
            logging.warning(f"üåê –¢–∏–º—á–∞—Å–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {telegram_id}: {e} (—Å–ø—Ä–æ–±–∞ {attempt}/{retries}).")
            time.sleep(1)
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ {telegram_id}: {e}")
            return False
    return False

def check_bonus_docs():
    logging.info("üì• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –±–æ–Ω—É—Å-–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")
    docs_to_check = get_unnotified_docs()
    if not docs_to_check:
        logging.info("‚ÑπÔ∏è –ù–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î.")
        return

    active_users = get_active_users()
    logging.info(f"üü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: {len(active_users)}")
    active_map = {str(u["employee_name"]).strip(): u for u in active_users}

    docs_to_mark = []

    for doc_number, period in docs_to_check:
        logging.info(f"üîç –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_number} ‚Äî {period}")
        employees = fetch_employees_for_doc(doc_number)

        matched = []
        for emp in employees:
            u = active_map.get(emp)
            if u and u.get("telegram_id"):
                matched.append(u)
                logging.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫: {emp} ‚Üí {u['telegram_id']}")
            else:
                logging.warning(f"‚ö†Ô∏è '{emp}' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Å–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–±–æ –±–µ–∑ telegram_id")

        if not matched:
            logging.warning(f"‚ö†Ô∏è {doc_number}: –Ω–µ–º–∞—î –∫–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ ‚Äî —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–Ω–æ–≤–ª—é—é.")
            continue

        message = (
            "üìÑ –ó º—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤:\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä: <b>{doc_number}</b>\n"
            f"‚Ä¢ –ü–µ—Ä—ñ–æ–¥: <b>{period}</b>"
        )

        sent_any = False
        for tg_id in {m["telegram_id"] for m in matched}:   # —É–Ω—ñ–∫–∞–ª—å–Ω—ñ ID
            ok = send_notification(tg_id, message)
            sent_any = sent_any or ok
            time.sleep(0.03)  # –ª–µ–≥–∫–∏–π —Ç—Ä–æ—Ç–ª—ñ–Ω–≥

        if sent_any:
            docs_to_mark.append(doc_number)
        else:
            logging.warning(f"‚ö†Ô∏è {doc_number}: —É—Å—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–µ–≤–¥–∞–ª—ñ ‚Äî —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–Ω–æ–≤–ª—é—é.")

    if docs_to_mark:
        affected = mark_bonus_docs_notified(docs_to_mark)
        logging.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ is_notified –ø–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö: {affected}")
    else:
        logging.info("‚ÑπÔ∏è –ñ–æ–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ (—É—Å–ø—ñ—à–Ω–∏—Ö –≤—ñ–¥–ø—Ä–∞–≤–æ–∫ –Ω–µ –±—É–ª–æ).")
