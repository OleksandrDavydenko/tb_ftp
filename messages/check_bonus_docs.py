import os
import logging
import requests
from telegram import Bot
from auth import get_power_bi_token
from db import get_db_connection, mark_bonus_docs_notified, get_active_users

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –¢–æ–∫–µ–Ω–∏
KEY = os.getenv('TELEGRAM_BOT_TOKEN')
DATASET_ID = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'

if not DATASET_ID:
    logging.error("‚ùå PBI_DATASET_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

if not KEY:
    logging.warning("‚ö†Ô∏è TELEGRAM_TOKEN –ø–æ—Ä–æ–∂–Ω—ñ–π: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ.")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
def get_unnotified_docs():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT doc_number, period FROM bonus_docs WHERE is_notified = FALSE")
    docs = cursor.fetchall()
    cursor.close()
    conn.close()
    logging.info(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ is_notified = FALSE: {len(docs)}")
    return docs  # [(doc_number, period), ...]

# DAX-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def fetch_employees_for_doc(doc_number: str):
    # –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –¢–û–ß–ù–û –¢–ï, –©–û –ü–†–ê–¶–Æ–Ñ –£ –¢–í–û–Ñ–ú–£ –¢–ï–°–¢–Ü
    safe_doc = doc_number.replace('"', '""')
    dax = f'''
    EVALUATE
    DISTINCT(
        SELECTCOLUMNS(
            FILTER(BonusesDetails, BonusesDetails[DocNumber] = "{safe_doc}"),
            "Employee", BonusesDetails[Employee]
        )
    )
    '''

    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Power BI —Ç–æ–∫–µ–Ω.")
        return []

    url = f"https://api.powerbi.com/v1.0/myorg/datasets/{DATASET_ID}/executeQueries"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    payload = {"queries": [{"query": dax}], "serializerSettings": {"includeNulls": True}}

    logging.info(f"üì§ –ù–∞–¥—Å–∏–ª–∞—é DAX –¥–ª—è {doc_number}: {dax.strip()}")
    r = requests.post(url, headers=headers, json=payload)

    if r.status_code != 200:
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äî –≤ —Ç–µ—Å—Ç—ñ —Ü–µ –¥–æ–ø–æ–º–æ–≥–ª–æ
        logging.error(f"‚ùå Power BI –∑–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è: {r.status_code} ‚Äî {r.text}")
        return []

    try:
        data = r.json()
        rows = data["results"][0]["tables"][0].get("rows", [])
        logging.info(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ {len(rows)} —Ä—è–¥–∫—ñ–≤ –∑ Power BI –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_number}")

        employees = set()
        for row in rows:
            # –ö–ª—é—á –º–æ–∂–µ –±—É—Ç–∏ "Employee" –∞–±–æ "[Employee]" –∞–±–æ "BonusesDetails[Employee]"
            key = next((k for k in row if "Employee" in k), None)
            if key and row[key]:
                employees.add(str(row[key]).strip())

        logging.info(f"üë• –ó–Ω–∞–π–¥–µ–Ω—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –¥–ª—è {doc_number}: {list(employees)}")
        return list(employees)

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Power BI: {e}")
        return []

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def send_notification(telegram_id, message):
    if not KEY:
        logging.error("‚ùå TELEGRAM_TOKEN –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    try:
        bot = Bot(token=KEY)
        bot.send_message(chat_id=telegram_id, text=message, parse_mode="HTML")
        logging.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ Telegram ID: {telegram_id}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram ID {telegram_id}: {e}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
def check_bonus_docs():
    logging.info("üì• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –±–æ–Ω—É—Å-–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤...")
    docs_to_check = get_unnotified_docs()
    if not docs_to_check:
        logging.info("‚ÑπÔ∏è –ù–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î.")
        return

    active_users = get_active_users()
    logging.info(f"üü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: {len(active_users)}")

    # –ü–æ–±—É–¥–æ–≤–∞ –º–∞–ø–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
    active_map = {str(user["employee_name"]).strip(): user for user in active_users}

    docs_to_mark = []  # ‚úÖ –ø–æ–∑–Ω–∞—á–∏–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏, –ø–æ —è–∫–∏—Ö —Å–ø—Ä–∞–≤–¥—ñ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    for doc_number, period in docs_to_check:
        logging.info(f"üîç –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_number} ‚Äî {period}")
        employees = fetch_employees_for_doc(doc_number)

        matched_users = []
        for emp in employees:
            if emp in active_map:
                matched_users.append(active_map[emp])
                logging.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞: {emp}")
            else:
                logging.warning(f"‚ö†Ô∏è –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ '{emp}' –Ω–µ–º–∞—î —Å–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö —É –ë–î")

        if not matched_users:
            logging.warning(f"‚ö†Ô∏è –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ ‚Äî —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–Ω–æ–≤–ª—é—é.")
            continue  # ‚ùó –ù–ï –ø–æ–∑–Ω–∞—á–∞—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç notified

        message = (
            f"üìÑ –ó º—è–≤–∏–≤—Å—è –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤:\n"
            f"‚Ä¢ –ù–æ–º–µ—Ä: <b>{doc_number}</b>\n"
            f"‚Ä¢ –ü–µ—Ä—ñ–æ–¥: <b>{period}</b>"
        )

        for user in matched_users:
            send_notification(user["telegram_id"], message)

        docs_to_mark.append(doc_number)

    if docs_to_mark:
        affected = mark_bonus_docs_notified(docs_to_mark)
        logging.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å—ñ–≤ is_notified (—Ç—ñ–ª—å–∫–∏ –ø–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö): {affected}")
    else:
        logging.info("‚ÑπÔ∏è –ñ–æ–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ (–Ω–µ –±—É–ª–æ –∫–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏).")
