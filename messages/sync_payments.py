import requests
import psycopg2
import os
import logging
from datetime import datetime
from auth import get_power_bi_token, normalize_phone_number
from db import add_payment

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def fetch_active_users():
    """phone_number, employee_name, joined_at"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT phone_number, employee_name, joined_at
        FROM users
        WHERE status = 'active'
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    return rows

def fetch_db_payments_bulk(conn, phone_numbers):
    """
    –í–∏—Ç—è–≥—É—î –≤—Å—ñ –ø–ª–∞—Ç–µ–∂—ñ –¥–ª—è –Ω–∞–±–æ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –æ–¥–Ω—ñ—î—é –≤–∏–±—ñ—Ä–∫–æ—é.
    –ü–æ–≤–µ—Ä—Ç–∞—î –º–∞–ø—É: { phone -> { payment_number -> set((amount, currency, date, accrual_month)) } }
    """
    if not phone_numbers:
        return {}

    cur = conn.cursor()
    cur.execute("""
        SELECT phone_number, payment_number, amount, currency, payment_date, accrual_month
        FROM payments
        WHERE phone_number = ANY(%s)
    """, (list(phone_numbers),))
    result = {}
    for phone, paynum, amount, currency, paydate, accrual_month in cur.fetchall():
        phone = normalize_phone_number(phone)
        dct = result.setdefault(phone, {})
        st = dct.setdefault(str(paynum), set())
        st.add((
            f"{float(amount):.2f}",
            currency,
            paydate.strftime('%Y-%m-%d'),
            (accrual_month or "").strip()
        ))
    cur.close()
    return result

def delete_payment_records_conn(conn, phone_number, payment_number):
    cur = conn.cursor()
    cur.execute("""
        DELETE FROM payments
        WHERE phone_number = %s AND payment_number = %s
    """, (phone_number, payment_number))
    conn.commit()
    cur.close()
    logging.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–ª–∞—Ç—ñ–∂—Ü—ñ {payment_number} –¥–ª—è {phone_number}")

def _dax_escape(s: str) -> str:
    """–ï–∫—Ä–∞–Ω—É—î –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏ –¥–ª—è DAX-—Ä—è–¥–∫—ñ–≤."""
    return (s or "").replace('"', '""')

def build_one_dax_query(active_users):
    """
    active_users: iterable of (phone_number, employee_name, joined_at)
    –§–æ—Ä–º—É—î –æ–¥–∏–Ω DAX, —â–æ:
      - –±—É–¥—É—î DATATABLE(Employee, JoinedAt) –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤;
      - –ø—ñ–¥—Ç—è–≥—É—î –ª–∏—à–µ —Ä—è–¥–∫–∏ SalaryPayment –¥–ª—è —Ü–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ —ó—Ö JoinedAt.
    """
    # –†—è–¥–∫–∏ DATATABLE: { "Emp Name", DATE(YYYY,MM,DD) }
    rows = []
    for _, emp, joined_at in active_users:
        emp_esc = _dax_escape(emp)
        dt = joined_at.date() if hasattr(joined_at, "date") else joined_at
        rows.append(f'{{ "{emp_esc}", DATE({dt.year},{dt.month},{dt.day}) }}')

    datatable_rows = ",\n        ".join(rows)

    dax = f"""
EVALUATE
VAR Users =
    DATATABLE(
        "Employee", STRING,
        "JoinedAt", DATE,
        {{
        {datatable_rows}
        }}
    )
VAR WithJ =
    ADDCOLUMNS(
        SalaryPayment,
        "JoinedAtX",
            LOOKUPVALUE(Users[JoinedAt], Users[Employee], SalaryPayment[Employee])
    )
VAR F =
    FILTER(
        WithJ,
        NOT ISBLANK([JoinedAtX]) && SalaryPayment[DocDate] >= [JoinedAtX]
    )
RETURN
SELECTCOLUMNS(
    F,
    "Employee",           SalaryPayment[Employee],
    "–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É",       SalaryPayment[DocDate],
    "–î–æ–∫—É–º–µ–Ω—Ç",           SalaryPayment[DocNumber],
    "–°—É–º–∞ UAH",           SalaryPayment[SUM_UAH],
    "–°—É–º–∞ USD",           SalaryPayment[SUM_USD],
    "–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è",  SalaryPayment[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]
)
"""
    return dax

def sync_payments_single_query():
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Power BI.")
        return

    # 1) –í–∏—Ç—è–≥—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —é–∑–µ—Ä—ñ–≤
    users = fetch_active_users()
    if not users:
        logging.info("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    # –ú–∞–ø–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
    emp_to_phone = {}
    for phone, emp, _ in users:
        emp_to_phone[emp] = normalize_phone_number(phone)

    # 2) –ë—É–¥—É—î–º–æ –æ–¥–∏–Ω DAX
    dax_query = build_one_dax_query(users)

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    body = {
        "queries": [{"query": dax_query}],
        "serializerSettings": {"includeNulls": True}
    }

    # 3) –û–¥–∏–Ω HTTP POST –¥–æ Power BI
    session = requests.Session()
    resp = session.post(power_bi_url, headers=headers, json=body, timeout=120)
    if resp.status_code != 200:
        logging.error(f"‚ùå Power BI error: {resp.status_code} | {resp.text}")
        return

    data = resp.json()
    rows = data['results'][0]['tables'][0].get('rows', [])

    # 4) –ì—Ä—É–ø—É—î–º–æ –≤—Å–µ –∑ Power BI: phone -> payment_number -> set(...)
    bi_by_phone = {}
    for r in rows:
        emp = (r.get("[Employee]") or "").strip()
        phone = emp_to_phone.get(emp)
        if not phone:
            # –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–µ—Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å —ñ–º–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º–æ
            continue

        doc = str(r.get("[–î–æ–∫—É–º–µ–Ω—Ç]", "") or "")
        usd = float(r.get("[–°—É–º–∞ USD]", 0) or 0)
        uah = float(r.get("[–°—É–º–∞ UAH]", 0) or 0)
        use_usd = abs(usd) > 0
        amount = usd if use_usd else uah
        currency = "USD" if use_usd else "UAH"
        pay_date = str(r.get("[–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É]", "")).split("T")[0]
        accrual = (r.get("[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]", "") or "").strip()

        dct = bi_by_phone.setdefault(phone, {})
        st = dct.setdefault(doc, set())
        st.add((f"{amount:.2f}", currency, pay_date, accrual))

    # 5) –¢—è–≥–Ω–µ–º–æ –≤—Å—ñ –Ω–∞—è–≤–Ω—ñ –∑–∞–ø–∏—Å–∏ –∑ –ë–î –æ–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
    conn = get_db_connection()
    db_all = fetch_db_payments_bulk(conn, set(emp_to_phone.values()))

    # 6) –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ (–ª–æ–≥—ñ–∫–∞ —è–∫ —Ä–∞–Ω—ñ—à–µ)
    total_changed = 0
    for phone, docs in bi_by_phone.items():
        existing_docs = db_all.get(phone, {})
        for payment_number, bi_set in docs.items():
            db_set = existing_docs.get(payment_number, set())
            if bi_set != db_set:
                delete_payment_records_conn(conn, phone, payment_number)
                for amount, currency, payment_date, accrual_month in bi_set:
                    try:
                        # add_payment –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å–≤–æ—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ‚Äî —è–∫ —ñ –±—É–ª–æ
                        add_payment(phone, float(amount), currency, payment_date, payment_number, accrual_month, False)
                        logging.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–ª–∞—Ç—ñ–∂: {phone} | {amount} {currency} | {accrual_month} | ‚Ññ {payment_number}")
                    except Exception as e:
                        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: {e}")
                total_changed += 1
            else:
                logging.info(f"‚è≠Ô∏è –ü–ª–∞—Ç—ñ–∂ {payment_number} –¥–ª—è {phone} –±–µ–∑ –∑–º—ñ–Ω")

    conn.close()
    logging.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {len(rows)} —Ä—è–¥–∫—ñ–≤ (–æ–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–∞—Ç—ñ–∂–æ–∫: {total_changed})")
