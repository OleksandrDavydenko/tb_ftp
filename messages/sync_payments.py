import asyncio
import requests
import psycopg2
import os
import logging
from datetime import datetime
from auth import get_power_bi_token
from db import add_payment

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
DATABASE_URL = os.getenv('DATABASE_URL')

TARGET_PHONE = "380632773227"

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def normalize_phone_number(phone_number):
    return phone_number[1:] if phone_number.startswith('+') else phone_number

def fetch_existing_records(cursor, phone_number, payment_number):
    cursor.execute("""
        SELECT amount, currency, payment_date::text, accrual_month
        FROM payments
        WHERE phone_number = %s AND payment_number = %s
    """, (phone_number, payment_number))
    return cursor.fetchall()

def records_differ(existing, new):
    def normalize(record):
        # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ 2 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
        amount = round(float(record[0]), 2)
        currency = str(record[1])
        payment_date = str(record[2])[:10]  # —Ç—ñ–ª—å–∫–∏ YYYY-MM-DD
        accrual_month = str(record[3]).strip()
        return (amount, currency, payment_date, accrual_month)

    normalized_existing = sorted([normalize(r) for r in existing])
    normalized_new = sorted([normalize(r) for r in new])
    
    return normalized_existing != normalized_new


def delete_payment_records(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            DELETE FROM payments
            WHERE phone_number = %s AND payment_number = %s
        """, (phone_number, payment_number))
        conn.commit()
        logging.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–ª–∞—Ç—ñ–∂—Ü—ñ {payment_number} –¥–ª—è {phone_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
    finally:
        cursor.close()
        conn.close()

async def async_add_payment(phone_number, —Å—É–º–∞, currency, –¥–∞—Ç–∞_–ø–ª–∞—Ç–µ–∂—É, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É, –º—ñ—Å—è—Ü—å_–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è, is_notified=False):
    try:
        add_payment(phone_number, —Å—É–º–∞, currency, –¥–∞—Ç–∞_–ø–ª–∞—Ç–µ–∂—É, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É, –º—ñ—Å—è—Ü—å_–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è, is_notified)
        logging.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–ª–∞—Ç—ñ–∂: {phone_number} | {—Å—É–º–∞} {currency} | {–º—ñ—Å—è—Ü—å_–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è} | ‚Ññ {–Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: {e}")

async def sync_payments():
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Power BI.")
        return

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {'Authorization': f'Bearer {token}', 'Content-Type': 'application/json'}

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT phone_number, employee_name, joined_at FROM users WHERE status = 'active' AND phone_number = %s", (TARGET_PHONE,))
    users = cursor.fetchall()

    for phone_number, employee_name, joined_at in users:
        phone_number = normalize_phone_number(phone_number)
        query_data = {
            "queries": [{
                "query": f"""
                    EVALUATE 
                    SELECTCOLUMNS(
                        FILTER(
                            SalaryPayment,
                            SalaryPayment[Employee] = "{employee_name}" &&
                            SalaryPayment[DocDate] >= "{joined_at.strftime('%Y-%m-%d')}"
                        ),
                        "–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É", SalaryPayment[DocDate],
                        "–î–æ–∫—É–º–µ–Ω—Ç", SalaryPayment[DocNumber],
                        "–°—É–º–∞ UAH", SalaryPayment[SUM_UAH],
                        "–°—É–º–∞ USD", SalaryPayment[SUM_USD],
                        "–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è", SalaryPayment[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]
                    )
                """
            }],
            "serializerSettings": {"includeNulls": True}
        }

        try:
            response = requests.post(url, headers=headers, json=query_data)
            if response.status_code != 200:
                logging.error(f"‚ùå Power BI Error: {response.status_code}, {response.text}")
                continue

            rows = response.json()['results'][0]['tables'][0].get('rows', [])
            grouped = {}
            for row in rows:
                –Ω–æ–º–µ—Ä = row.get("[–î–æ–∫—É–º–µ–Ω—Ç]", "")
                grouped.setdefault(–Ω–æ–º–µ—Ä, []).append(row)

            for –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É, items in grouped.items():
                new_data = []
                for row in items:
                    —Å—É–º–∞_uah = float(row.get("[–°—É–º–∞ UAH]", 0))
                    —Å—É–º–∞_usd = float(row.get("[–°—É–º–∞ USD]", 0))
                    –¥–∞—Ç–∞ = row.get("[–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É]", "")
                    –º—ñ—Å—è—Ü—å = row.get("[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]", "").strip()

                    if abs(—Å—É–º–∞_usd) > 0:
                        —Å—É–º–∞, –≤–∞–ª—é—Ç–∞ = —Å—É–º–∞_usd, "USD"
                    elif abs(—Å—É–º–∞_uah) > 0:
                        —Å—É–º–∞, –≤–∞–ª—é—Ç–∞ = —Å—É–º–∞_uah, "UAH"
                    else:
                        continue

                    new_data.append((—Å—É–º–∞, –≤–∞–ª—é—Ç–∞, –¥–∞—Ç–∞, –º—ñ—Å—è—Ü—å))

                existing_data = fetch_existing_records(cursor, phone_number, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É)

                if records_differ(existing_data, new_data):
                    delete_payment_records(phone_number, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É)
                    for —Å—É–º–∞, –≤–∞–ª—é—Ç–∞, –¥–∞—Ç–∞, –º—ñ—Å—è—Ü—å in new_data:
                        await async_add_payment(phone_number, —Å—É–º–∞, –≤–∞–ª—é—Ç–∞, –¥–∞—Ç–∞, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É, –º—ñ—Å—è—Ü—å, is_notified=False)
                else:
                    logging.info(f"‚öñÔ∏è –ü–ª–∞—Ç—ñ–∂ {–Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É} –¥–ª—è {phone_number} –±–µ–∑ –∑–º—ñ–Ω")

        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–ª—è {employee_name}: {e}")

    cursor.close()
    conn.close()
