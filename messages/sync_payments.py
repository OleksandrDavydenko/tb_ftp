import asyncio
import psycopg2
import os
import logging
import pandas as pd
from datetime import datetime
from auth import normalize_phone_number
from db import add_payment

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def fetch_db_payments(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT amount, currency, payment_date, accrual_month
        FROM payments
        WHERE phone_number = %s AND payment_number = %s
    """, (phone_number, payment_number))
    records = cursor.fetchall()
    cursor.close()
    conn.close()
    return set((f"{float(r[0]):.2f}", r[1], r[2].strftime('%Y-%m-%d'), r[3].strip()) for r in records)

def delete_payment_records(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            DELETE FROM payments
            WHERE phone_number = %s AND payment_number = %s
        """, (phone_number, payment_number))
        conn.commit()
        logging.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–ª–∞—Ç—ñ–∂—Ü—ñ {payment_number} –¥–ª—è {phone_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
    finally:
        cursor.close()
        conn.close()

async def async_add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month):
    try:
        add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month, False)
        logging.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–ª–∞—Ç—ñ–∂: {phone_number} | {amount} {currency} | {accrual_month} | ‚Ññ {payment_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: {e}")

async def sync_payments():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT phone_number, employee_name, joined_at 
        FROM users 
        WHERE status = 'active'
    """)
    users = cursor.fetchall()
    cursor.close()
    conn.close()

    for user in users:
        phone_number, employee_name, joined_at = user
        phone_number = normalize_phone_number(phone_number)

        # –ó–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –ø—ñ—Å–ª—è –¥–∞—Ç–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
        conn = get_db_connection()
        query = f"""
            SELECT DocDate, DocNumber, SUM_UAH, SUM_USD, –ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
            FROM SalaryPayment
            WHERE Employee = '{employee_name}' AND DocDate >= '{joined_at.strftime('%Y-%m-%d')}'
        """
        cursor = conn.cursor()
        cursor.execute(query)
        rows = cursor.fetchall()
        cursor.close()
        conn.close()

        if rows:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            df = pd.DataFrame(rows, columns=["–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É", "–î–æ–∫—É–º–µ–Ω—Ç", "–°—É–º–∞ UAH", "–°—É–º–∞ USD", "–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"])

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–ª–æ–Ω—Ü—ñ Employee
            df = df.dropna(subset=["–î–æ–∫—É–º–µ–Ω—Ç"])

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É
            logging.info(f"‚úÖ –î–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–∞–Ω–∏—Ö –¥–ª—è {employee_name}: {df}")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
            for _, row in df.iterrows():
                payment_number = row["–î–æ–∫—É–º–µ–Ω—Ç"]
                amount = float(row["–°—É–º–∞ USD"]) if abs(row["–°—É–º–∞ USD"]) > 0 else float(row["–°—É–º–∞ UAH"])
                currency = "USD" if abs(row["–°—É–º–∞ USD"]) > 0 else "UAH"
                payment_date = row["–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É"].strftime('%Y-%m-%d')
                accrual_month = row["–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"]

                # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                db_set = fetch_db_payments(phone_number, payment_number)
                bi_set = {(f"{amount:.2f}", currency, payment_date, accrual_month)}

                if bi_set != db_set:
                    delete_payment_records(phone_number, payment_number)
                    for amount, currency, payment_date, accrual_month in bi_set:
                        await async_add_payment(phone_number, float(amount), currency, payment_date, payment_number, accrual_month)
                else:
                    logging.info(f"‚è≠Ô∏è –ü–ª–∞—Ç—ñ–∂ {payment_number} –¥–ª—è {phone_number} –±–µ–∑ –∑–º—ñ–Ω")

        else:
            logging.info(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è {employee_name} –ø—ñ—Å–ª—è {joined_at.strftime('%Y-%m-%d')}")

