import asyncio
import requests
import psycopg2
import os
import logging
import pandas as pd
from datetime import datetime
from auth import get_power_bi_token, normalize_phone_number
from db import add_payment

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def fetch_db_payments(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT amount, currency, payment_date, accrual_month
        FROM payments
        WHERE phone_number = %s AND payment_number = %s
    """, (phone_number, payment_number))
    records = cursor.fetchall()
    cursor.close()
    conn.close()
    return set((f"{float(r[0]):.2f}", r[1], r[2].strftime('%Y-%m-%d'), r[3].strip()) for r in records)

def delete_payment_records(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            DELETE FROM payments
            WHERE phone_number = %s AND payment_number = %s
        """, (phone_number, payment_number))
        conn.commit()
        logging.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–ª–∞—Ç—ñ–∂—Ü—ñ {payment_number} –¥–ª—è {phone_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
    finally:
        cursor.close()
        conn.close()

async def async_add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month):
    try:
        add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month, False)
        logging.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–ª–∞—Ç—ñ–∂: {phone_number} | {amount} {currency} | {accrual_month} | ‚Ññ {payment_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: {e}")

async def sync_payments():
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Power BI.")
        return

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    # –ó–∞–ø–∏—Ç—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ SalaryPayment
    query_data = {
        "queries": [
            {
                "query": """
                    EVALUATE 
                    SELECTCOLUMNS(
                        SalaryPayment,
                        "Employee", SalaryPayment[Employee],
                        "–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É", SalaryPayment[DocDate],
                        "–î–æ–∫—É–º–µ–Ω—Ç", SalaryPayment[DocNumber],
                        "–°—É–º–∞ UAH", SalaryPayment[SUM_UAH],
                        "–°—É–º–∞ USD", SalaryPayment[SUM_USD],
                        "–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è", SalaryPayment[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]
                    )
                """
            }
        ],
        "serializerSettings": {
            "includeNulls": True
        }
    }

    try:
        response = requests.post(power_bi_url, headers=headers, json=query_data)
        if response.status_code != 200:
            logging.error(f"‚ùå Power BI error: {response.status_code} | {response.text}")
            return

        data = response.json()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞–±–ª–∏—Ü—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if 'results' not in data or len(data['results']) == 0 or 'tables' not in data['results'][0]:
            logging.error("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Power BI.")
            return

        rows = data['results'][0]['tables'][0].get('rows', [])

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logging.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ Power BI: {rows}")

        if len(rows) == 0:
            logging.info("‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —É –¥–∞–Ω–∏—Ö.")
            return

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
        df = pd.DataFrame(rows)

        # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        df.columns = df.columns.str.replace(r'[\[\]]', '', regex=True)  # –í–∏–¥–∞–ª—è—î–º–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –¥—É–∂–∫–∏ –∑ –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫
        logging.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {df.columns}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–ª–æ–Ω–∫–∏ 'Employee'
        if 'Employee' not in df.columns:
            logging.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ 'Employee' –≤ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
            return

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–ª–æ–Ω—Ü—ñ Employee
        df = df[df['Employee'].notna()]

        # –í–∏–≤–æ–¥–∏–º–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        logging.info(f"‚úÖ –î–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–∞–Ω–∏—Ö: {df}")

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
        for _, row in df.iterrows():
            employee_name = row['Employee']
            payment_number = row['–î–æ–∫—É–º–µ–Ω—Ç']
            amount = float(row['–°—É–º–∞ USD']) if abs(row['–°—É–º–∞ USD']) > 0 else float(row['–°—É–º–∞ UAH'])
            currency = "USD" if abs(row['–°—É–º–∞ USD']) > 0 else "UAH"
            payment_date = str(row['–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É']).split("T")[0]
            accrual_month = row['–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è'].strip()

            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Å —ñ–∑ –ë–î
            db_set = fetch_db_payments(normalize_phone_number(employee_name), payment_number)

            bi_set = {(f"{amount:.2f}", currency, payment_date, accrual_month)}

            if bi_set != db_set:
                delete_payment_records(normalize_phone_number(employee_name), payment_number)
                for amount, currency, payment_date, accrual_month in bi_set:
                    await async_add_payment(normalize_phone_number(employee_name), float(amount), currency, payment_date, payment_number, accrual_month)
            else:
                logging.info(f"‚è≠Ô∏è –ü–ª–∞—Ç—ñ–∂ {payment_number} –¥–ª—è {employee_name} –±–µ–∑ –∑–º—ñ–Ω")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")
