import asyncio
import requests
import psycopg2
import os
import logging
from datetime import datetime
from auth import get_power_bi_token
from db import add_payment

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
DATABASE_URL = os.getenv('DATABASE_URL')

TARGET_PHONE = "380632773227"

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def normalize_phone_number(phone_number):
    return phone_number[1:] if phone_number.startswith('+') else phone_number

def delete_payment_records(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            DELETE FROM payments
            WHERE phone_number = %s AND payment_number = %s
        """, (phone_number, payment_number))
        conn.commit()
        logging.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–ª–∞—Ç—ñ–∂—Ü—ñ {payment_number} –¥–ª—è {phone_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤ –ø–ª–∞—Ç—ñ–∂–∫–∏ {payment_number}: {e}")
    finally:
        cursor.close()
        conn.close()

async def async_add_payment(phone_number, —Å—É–º–∞, currency, –¥–∞—Ç–∞_–ø–ª–∞—Ç–µ–∂—É, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É, –º—ñ—Å—è—Ü—å_–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è, already_notified):
    try:
        add_payment(phone_number, —Å—É–º–∞, currency, –¥–∞—Ç–∞_–ø–ª–∞—Ç–µ–∂—É, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É, –º—ñ—Å—è—Ü—å_–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è, already_notified)
        logging.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–ª–∞—Ç—ñ–∂: {phone_number} | {—Å—É–º–∞} {currency} | {–º—ñ—Å—è—Ü—å_–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è} | ‚Ññ {–Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É} | notified={already_notified}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É: {e}")

async def sync_payments():
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Power BI.")
        return

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT phone_number, employee_name, joined_at 
        FROM users 
        WHERE status = 'active' AND phone_number = %s
    """, (TARGET_PHONE,))
    users = cursor.fetchall()

    for user in users:
        phone_number, employee_name, joined_at = user
        phone_number = normalize_phone_number(phone_number)

        query_data = {
            "queries": [
                {
                    "query": f"""
                        EVALUATE 
                        SELECTCOLUMNS(
                            FILTER(
                                SalaryPayment,
                                SalaryPayment[Employee] = "{employee_name}" &&
                                SalaryPayment[DocDate] >= "{joined_at.strftime('%Y-%m-%d')}"
                            ),
                            "–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É", SalaryPayment[DocDate],
                            "–î–æ–∫—É–º–µ–Ω—Ç", SalaryPayment[DocNumber],
                            "–°—É–º–∞ UAH", SalaryPayment[SUM_UAH],
                            "–°—É–º–∞ USD", SalaryPayment[SUM_USD],
                            "–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è", SalaryPayment[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]
                        )
                    """
                }
            ],
            "serializerSettings": {
                "includeNulls": True
            }
        }

        try:
            response = requests.post(power_bi_url, headers=headers, json=query_data)
            if response.status_code == 200:
                data = response.json()
                rows = data['results'][0]['tables'][0].get('rows', [])
                
                grouped = {}
                for payment in rows:
                    –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É = payment.get("[–î–æ–∫—É–º–µ–Ω—Ç]", "")
                    grouped.setdefault(–Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É, []).append(payment)

                for –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É, payments in grouped.items():
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ —Ü–µ–π –ø–ª–∞—Ç—ñ–∂
                    cursor.execute("""
                        SELECT COUNT(*) FROM payments
                        WHERE phone_number = %s AND payment_number = %s
                    """, (phone_number, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É))
                    exists = cursor.fetchone()[0] > 0

                    # –Ø–∫—â–æ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∑–∞–ø–∏—Å –ø–æ —Ü—å–æ–º—É –ø–ª–∞—Ç–µ–∂—É ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
                    if exists:
                        delete_payment_records(phone_number, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É)

                    for payment in payments:
                        —Å—É–º–∞_uah = float(payment.get("[–°—É–º–∞ UAH]", 0))
                        —Å—É–º–∞_usd = float(payment.get("[–°—É–º–∞ USD]", 0))
                        –¥–∞—Ç–∞_–ø–ª–∞—Ç–µ–∂—É = payment.get("[–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É]", "")
                        –º—ñ—Å—è—Ü—å_–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è = payment.get("[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]", "").strip()

                        if abs(—Å—É–º–∞_usd) > 0:
                            —Å—É–º–∞ = —Å—É–º–∞_usd
                            currency = "USD"
                        elif abs(—Å—É–º–∞_uah) > 0:
                            —Å—É–º–∞ = —Å—É–º–∞_uah
                            currency = "UAH"
                        else:
                            continue

                        await async_add_payment(phone_number, —Å—É–º–∞, currency, –¥–∞—Ç–∞_–ø–ª–∞—Ç–µ–∂—É, –Ω–æ–º–µ—Ä_–ø–ª–∞—Ç–µ–∂—É, –º—ñ—Å—è—Ü—å_–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è, already_notified)

                logging.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {len(rows)} –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è {employee_name}.")
            else:
                logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Power BI: {response.status_code}, {response.text}")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–ª—è {employee_name}: {e}")

    cursor.close()
    conn.close()
