import asyncio
import requests
import psycopg2
import os
import logging
import pandas as pd
from datetime import datetime
from auth import get_power_bi_token, normalize_phone_number
from db import add_payment

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')


def fetch_db_payments(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT amount, currency, payment_date, accrual_month
        FROM payments
        WHERE phone_number = %s AND payment_number = %s
    """, (phone_number, payment_number))
    records = cursor.fetchall()
    cursor.close()
    conn.close()
    return set((f"{float(r[0]):.2f}", r[1], r[2].strftime('%Y-%m-%d'), r[3].strip()) for r in records)

def delete_payment_records(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            DELETE FROM payments
            WHERE phone_number = %s AND payment_number = %s
        """, (phone_number, payment_number))
        conn.commit()
        logging.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–ª–∞—Ç—ñ–∂—Ü—ñ {payment_number} –¥–ª—è {phone_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
    finally:
        cursor.close()
        conn.close()

async def async_add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month):
    try:
        add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month, False)
        logging.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–ª–∞—Ç—ñ–∂: {phone_number} | {amount} {currency} | {accrual_month} | ‚Ññ {payment_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: {e}")

async def sync_payments():
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Power BI.")
        return

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT phone_number, employee_name, joined_at 
        FROM users 
        WHERE status = 'active'
    """)
    users = cursor.fetchall()
    cursor.close()
    conn.close()

    # –û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    query_data = {
        "queries": [
            {
                "query": """
                    EVALUATE 
                    SELECTCOLUMNS(
                        SalaryPayment,
                        "Employee", SalaryPayment[Employee],
                        "DocDate", SalaryPayment[DocDate],
                        "DocNumber", SalaryPayment[DocNumber],
                        "SUM_UAH", SalaryPayment[SUM_UAH],
                        "SUM_USD", SalaryPayment[SUM_USD],
                        "AccrualMonth", SalaryPayment[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]
                    )
                """
            }
        ],
        "serializerSettings": {
            "includeNulls": True
        }
    }

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Power BI
        logging.info("üîÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Power BI...")
        response = requests.post(power_bi_url, headers=headers, json=query_data)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if response.status_code == 200:
            data = response.json()
            logging.info(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Power BI: {data}")
        else:
            logging.error(f"‚ùå Power BI error: {response.status_code} | {response.text}")
            return

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ —É DataFrame
        rows = data['results'][0]['tables'][0].get('rows', [])
        df = pd.DataFrame(rows)
        logging.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤ –∑ Power BI")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ DataFrame
        logging.debug(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ: {df.head()}")

        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        for user in users:
            phone_number, employee_name, joined_at = user
            phone_number = normalize_phone_number(phone_number)

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–∞–Ω—ñ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            user_data = df[df['Employee'] == employee_name]
            logging.info(f"üîÑ –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è {employee_name} ({phone_number})")

            if user_data.empty:
                logging.info(f"‚ùå –î–ª—è {employee_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö.")
                continue

            # –ì—Ä—É–ø—É—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ –∑–∞ –Ω–æ–º–µ—Ä–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            grouped = user_data.groupby('DocNumber')

            for payment_number, payments in grouped:
                bi_set = set()
                for _, p in payments.iterrows():
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–ª—è 'Employee'
                    if 'Employee' not in p or pd.isna(p['Employee']):
                        logging.error(f"‚ùå –ü–æ–ª–µ 'Employee' –≤—ñ–¥—Å—É—Ç–Ω—î –∞–±–æ –ø—É—Å—Ç–µ –¥–ª—è –ø–ª–∞—Ç—ñ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É: {p}")
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π –∑–∞–ø–∏—Å, —è–∫—â–æ –ø–æ–ª–µ 'Employee' –≤—ñ–¥—Å—É—Ç–Ω—î –∞–±–æ –ø—É—Å—Ç–µ

                    employee_name = p['Employee']
                    amount = float(p['SUM_USD']) if abs(p['SUM_USD']) > 0 else float(p['SUM_UAH'])
                    currency = "USD" if abs(p['SUM_USD']) > 0 else "UAH"
                    payment_date = p['DocDate'].split("T")[0]
                    accrual_month = p['AccrualMonth'].strip()
                    bi_set.add((f"{amount:.2f}", currency, payment_date, accrual_month))

                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
                logging.debug(f"–ü–ª–∞—Ç—ñ–∂ {payment_number} –¥–ª—è {employee_name}: {bi_set}")

                # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –¥–∞–Ω–∏–º–∏ –∑ –ë–î
                db_set = fetch_db_payments(phone_number, payment_number)

                if bi_set != db_set:
                    logging.info(f"üîÑ –î–∞–Ω—ñ –ø–æ –ø–ª–∞—Ç—ñ–∂—Ü—ñ {payment_number} –¥–ª—è {phone_number} –∑–º—ñ–Ω–∏–ª–∏—Å—è.")
                    delete_payment_records(phone_number, payment_number)
                    for amount, currency, payment_date, accrual_month in bi_set:
                        await async_add_payment(phone_number, float(amount), currency, payment_date, payment_number, accrual_month)
                else:
                    logging.info(f"‚è≠Ô∏è –ü–ª–∞—Ç—ñ–∂ {payment_number} –¥–ª—è {phone_number} –±–µ–∑ –∑–º—ñ–Ω")

            logging.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {len(payments)} —Ä—è–¥–∫—ñ–≤ –¥–ª—è {employee_name}")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–∞—Ç–µ–∂—ñ–≤: {e}")
    logging.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–ª–∞—Ç–µ–∂—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")