import asyncio
import requests
import psycopg2
import os
import logging
import pandas as pd
from datetime import datetime
from auth import get_power_bi_token, normalize_phone_number
from db import add_payment

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def fetch_db_payments(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT amount, currency, payment_date, accrual_month
        FROM payments
        WHERE phone_number = %s AND payment_number = %s
    """, (phone_number, payment_number))
    records = cursor.fetchall()
    cursor.close()
    conn.close()
    return set((f"{float(r[0]):.2f}", r[1], r[2].strftime('%Y-%m-%d'), r[3].strip()) for r in records)

def delete_payment_records(phone_number, payment_number):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            DELETE FROM payments
            WHERE phone_number = %s AND payment_number = %s
        """, (phone_number, payment_number))
        conn.commit()
        logging.info(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–ª–∞—Ç—ñ–∂—Ü—ñ {payment_number} –¥–ª—è {phone_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
    finally:
        cursor.close()
        conn.close()

async def async_add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month):
    try:
        add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month, False)
        logging.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–ª–∞—Ç—ñ–∂: {phone_number} | {amount} {currency} | {accrual_month} | ‚Ññ {payment_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: {e}")

async def sync_payments():
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Power BI.")
        return

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    # –ó–∞–ø–∏—Ç—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ SalaryPayment
    query_data = {
        "queries": [
            {
                "query": """
                    EVALUATE 
                    SELECTCOLUMNS(
                        SalaryPayment,
                        "Employee", SalaryPayment[Employee],
                        "–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É", SalaryPayment[DocDate],
                        "–î–æ–∫—É–º–µ–Ω—Ç", SalaryPayment[DocNumber],
                        "–°—É–º–∞ UAH", SalaryPayment[SUM_UAH],
                        "–°—É–º–∞ USD", SalaryPayment[SUM_USD],
                        "–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è", SalaryPayment[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]
                    )
                """
            }
        ],
        "serializerSettings": {
            "includeNulls": True
        }
    }

    try:
        response = requests.post(power_bi_url, headers=headers, json=query_data)
        if response.status_code != 200:
            logging.error(f"‚ùå Power BI error: {response.status_code} | {response.text}")
            return

        data = response.json()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞–±–ª–∏—Ü—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if 'results' not in data or len(data['results']) == 0 or 'tables' not in data['results'][0]:
            logging.error("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Power BI.")
            return

        rows = data['results'][0]['tables'][0].get('rows', [])
        if len(rows) == 0:
            logging.info("‚ùå –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —É –¥–∞–Ω–∏—Ö.")
            return

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
        df = pd.DataFrame(rows)

        # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        df.columns = df.columns.str.replace(r'[\[\]]', '', regex=True)
        logging.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {df.columns}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–ª–æ–Ω–∫–∏ 'Employee'
        if 'Employee' not in df.columns:
            logging.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ 'Employee' –≤ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.")
            return

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–ª–æ–Ω—Ü—ñ Employee
        df = df[df['Employee'].notna() & (df['Employee'] != '')]

        # –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂—É –¥–æ —Ñ–æ—Ä–º–∞—Ç—É datetime —ñ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ (–≤–∏–¥–∞–ª—è—î–º–æ —á–∞—Å)
        df['–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É'] = pd.to_datetime(df['–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É'], errors='coerce').dt.normalize()

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        logging.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤ –∑ Power BI")
        logging.info(f"üìä –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –≤ –¥–∞–Ω–∏—Ö Power BI: {df['Employee'].unique()[:10]}")  # –ü–µ—Ä—à—ñ 10
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —î –ø–ª–∞—Ç–µ–∂—ñ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        today = pd.Timestamp.now().normalize()
        today_payments = df[df['–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É'] == today]
        logging.info(f"üìÖ –ü–ª–∞—Ç–µ–∂—ñ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today}): {len(today_payments)} –∑–∞–ø–∏—Å—ñ–≤")
        if len(today_payments) > 0:
            logging.info(f"üìã –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –∑ –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {today_payments['Employee'].unique()}")

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ users
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""SELECT employee_name, phone_number, joined_at FROM users WHERE status = 'active'""")
        users = cursor.fetchall()
        cursor.close()
        conn.close()

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑–∞ —ñ–º–µ–Ω–µ–º
        users_dict = {}
        for user in users:
            employee_name, phone_number, joined_at = user
            normalized_phone = normalize_phone_number(phone_number)
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–∞—Ç—É –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è (–≤–∏–¥–∞–ª—è—î–º–æ —á–∞—Å)
            joined_at_normalized = pd.to_datetime(joined_at).normalize()
            users_dict[employee_name] = {
                'phone_number': normalized_phone,
                'joined_at': joined_at_normalized
            }

        logging.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(users_dict)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ë–î")
        logging.info(f"üìã –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –∑ –ë–î: {list(users_dict.keys())[:10]}")  # –ü–µ—Ä—à—ñ 10

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
        synced_count = 0
        
        for employee_name, user_info in users_dict.items():
            phone_number = user_info['phone_number']
            joined_at = user_info['joined_at']

            if not phone_number:
                logging.warning(f"‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è {employee_name} –Ω–µ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π.")
                continue

            logging.info(f"üîç –û–±—Ä–æ–±–ª—è—î–º–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞: {employee_name} (—Ç–µ–ª: {phone_number}, –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è: {joined_at})")

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ –ø–æ –Ü–ú–ï–ù–Ü —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ —Ç–∞ –¥–∞—Ç—ñ (–ø–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç–∏)
            employee_payments = df[
                (df['Employee'] == employee_name) & 
                (df['–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É'] >= joined_at)
            ]

            logging.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(employee_payments)} –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è {employee_name} –ø—ñ—Å–ª—è {joined_at}")

            if employee_payments.empty:
                logging.info(f"‚è≠Ô∏è –ù–µ–º–∞—î –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è {employee_name} –ø—ñ—Å–ª—è {joined_at}")
                # –î–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –≤–∑–∞–≥–∞–ª—ñ —î —Ü–µ–π —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –≤ –¥–∞–Ω–∏—Ö Power BI
                all_employee_payments = df[df['Employee'] == employee_name]
                if len(all_employee_payments) > 0:
                    logging.info(f"‚ÑπÔ∏è –£–≤–∞–≥–∞! {employee_name} —î –≤ Power BI, –∞–ª–µ –≤—Å—ñ –ø–ª–∞—Ç–µ–∂—ñ –¥–æ {joined_at}")
                continue

            # –ì—Ä—É–ø—É—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ –ø–æ –Ω–æ–º–µ—Ä–∞–º –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            grouped = employee_payments.groupby('–î–æ–∫—É–º–µ–Ω—Ç')
            
            for payment_number, group in grouped:
                bi_set = set()
                for _, row in group.iterrows():
                    amount = float(row["–°—É–º–∞ USD"]) if abs(row["–°—É–º–∞ USD"]) > 0 else float(row["–°—É–º–∞ UAH"])
                    currency = "USD" if abs(row["–°—É–º–∞ USD"]) > 0 else "UAH"
                    payment_date = row["–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É"].strftime('%Y-%m-%d') if pd.notna(row["–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂—É"]) else ""
                    accrual_month = str(row["–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"]).strip() if pd.notna(row["–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è"]) else ""
                    
                    bi_set.add((f"{amount:.2f}", currency, payment_date, accrual_month))

                # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –¥–∞–Ω–∏–º–∏ –∑ –ë–î
                db_set = fetch_db_payments(phone_number, payment_number)
                
                logging.info(f"üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–ª—è {employee_name}, –ø–ª–∞—Ç—ñ–∂ {payment_number}:")
                logging.info(f"   BI set: {bi_set}")
                logging.info(f"   DB set: {db_set}")
                
                if bi_set != db_set:
                    logging.info(f"üîÑ –ó–Ω–∞–π–¥–µ–Ω—ñ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è {employee_name}, –ø–ª–∞—Ç—ñ–∂ {payment_number}")
                    delete_payment_records(phone_number, payment_number)
                    for amount, currency, payment_date, accrual_month in bi_set:
                        await async_add_payment(phone_number, float(amount), currency, payment_date, payment_number, accrual_month)
                    synced_count += 1
                else:
                    logging.info(f"‚è≠Ô∏è –ü–ª–∞—Ç—ñ–∂ {payment_number} –¥–ª—è {employee_name} –±–µ–∑ –∑–º—ñ–Ω")

        logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–Ω–æ–≤–ª–µ–Ω–æ {synced_count} –ø–ª–∞—Ç–µ–∂—ñ–≤")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")
        import traceback
        logging.error(f"‚ùå –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {traceback.format_exc()}")