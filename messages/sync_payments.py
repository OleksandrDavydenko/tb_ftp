import asyncio
import requests
import psycopg2
import os
import logging
import pandas as pd
from datetime import datetime
from auth import get_power_bi_token, normalize_phone_number
from db import add_payment

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def fetch_all_db_payments():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT phone_number, employee_name, payment_number, amount, currency, payment_date, accrual_month
        FROM payments
        JOIN users ON payments.phone_number = users.phone_number
        WHERE users.status = 'active'
    """)
    records = cursor.fetchall()
    cursor.close()
    conn.close()
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –ª–µ–≥—à–æ—ó –æ–±—Ä–æ–±–∫–∏
    return pd.DataFrame(records, columns=['phone_number', 'employee_name', 'payment_number', 'amount', 'currency', 'payment_date', 'accrual_month'])

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–ª–∞—Ç–µ–∂—ñ–≤
async def async_add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month):
    try:
        add_payment(phone_number, amount, currency, payment_date, payment_number, accrual_month, False)
        logging.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–ª–∞—Ç—ñ–∂: {phone_number} | {amount} {currency} | {accrual_month} | ‚Ññ {payment_number}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ: {e}")

async def sync_payments():
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Power BI.")
        return

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    # –û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    query_data = {
        "queries": [
            {
                "query": """
                    EVALUATE 
                    SELECTCOLUMNS(
                        FILTER(
                            SalaryPayment,
                            NOT(ISBLANK(SalaryPayment[Employee])) && SalaryPayment[Employee] <> ""
                        ),
                        "Employee", SalaryPayment[Employee],
                        "DocDate", SalaryPayment[DocDate],
                        "DocNumber", SalaryPayment[DocNumber],
                        "SUM_UAH", SalaryPayment[SUM_UAH],
                        "SUM_USD", SalaryPayment[SUM_USD],
                        "AccrualMonth", SalaryPayment[–ú—ñ—Å—è—Ü—å–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è]
                    )
                """
            }
        ],
        "serializerSettings": {
            "includeNulls": True
        }
    }

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Power BI
        logging.info("üîÑ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Power BI...")
        response = requests.post(power_bi_url, headers=headers, json=query_data)

        if response.status_code != 200:
            logging.error(f"‚ùå Power BI error: {response.status_code} | {response.text}")
            return

        data = response.json()
        rows = data['results'][0]['tables'][0].get('rows', [])
        df_power_bi = pd.DataFrame(rows)
        logging.info(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(df_power_bi)} –∑–∞–ø–∏—Å—ñ–≤ –∑ Power BI")

        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ 'Employee'
        df_power_bi = df_power_bi[df_power_bi['Employee'].notna() & (df_power_bi['Employee'] != '')]
        logging.info(f"‚úÖ –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∏–ª–æ—Å—è {len(df_power_bi)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–ª–∞—Ç–µ–∂—ñ –∑ –ë–î –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        df_db = fetch_all_db_payments()

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        logging.debug(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ –ë–î: {df_db.head()}")
        logging.debug(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ Power BI: {df_power_bi.head()}")

        # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Power BI, –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ
        for _, user_payment in df_power_bi.iterrows():
            employee_name = user_payment['Employee']
            payment_number = user_payment['DocNumber']
            amount = float(user_payment['SUM_USD']) if abs(user_payment['SUM_USD']) > 0 else float(user_payment['SUM_UAH'])
            currency = "USD" if abs(user_payment['SUM_USD']) > 0 else "UAH"
            payment_date = user_payment['DocDate'].split("T")[0]
            accrual_month = user_payment['AccrualMonth'].strip()

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–ª–∞—Ç–µ–∂—ñ –ø–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É
            db_payment = df_db[df_db['employee_name'] == employee_name]

            # –Ø–∫—â–æ –≤ –±–∞–∑—ñ —î –∑–∞–ø–∏—Å –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ
            if not db_payment.empty:
                db_payment_set = set(db_payment[['payment_number', 'amount', 'currency', 'payment_date', 'accrual_month']].apply(tuple, axis=1))
                bi_payment_set = {(payment_number, f"{amount:.2f}", currency, payment_date, accrual_month)}

                # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ
                if db_payment_set != bi_payment_set:
                    logging.info(f"üîÑ –ó–º—ñ–Ω–∏ –≤ –ø–ª–∞—Ç—ñ–∂—Ü—ñ {payment_number} –¥–ª—è {employee_name}. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ...")
                    await async_add_payment(user_payment['phone_number'], amount, currency, payment_date, payment_number, accrual_month)
                else:
                    logging.info(f"‚è≠Ô∏è –ü–ª–∞—Ç—ñ–∂ {payment_number} –¥–ª—è {employee_name} –±–µ–∑ –∑–º—ñ–Ω.")
            else:
                logging.info(f"‚ùå –ü–ª–∞—Ç—ñ–∂ {payment_number} –¥–ª—è {employee_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î.")

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–∞—Ç–µ–∂—ñ–≤: {e}")
    logging.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–ª–∞—Ç–µ–∂—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
