# messages/sync_bonus_docs.py

import os
import json
import logging
import requests
from datetime import datetime
from auth import get_power_bi_token
from db import bulk_add_bonus_docs  # –∞–±–æ add_bonus_doc

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

DATASET_ID = os.getenv("PBI_DATASET_ID", "8b80be15-7b31-49e4-bc85-8b37a0d98f1c")

DAX_QUERY = """
EVALUATE
SUMMARIZE(
    'BonusesDetails',
    'BonusesDetails'[DocNumber],
    'BonusesDetails'[Period]
)
ORDER BY 'BonusesDetails'[Period], 'BonusesDetails'[DocNumber]
"""

def _normalize_period(p):
    """–û—á—ñ–∫—É—î–º–æ –¥–∞—Ç—É —Ç–∏–ø—É '2025-01-01T00:00:00' –∞–±–æ '2025-01-01' ‚Üí –ø–æ–≤–µ—Ä–Ω–µ–º–æ 'YYYY-MM-DD'."""
    if p is None:
        return None
    s = str(p)
    if "T" in s:
        s = s.split("T", 1)[0]
    return s

async def sync_bonus_docs():
    """
    –¢—è–≥–Ω–µ DocNumber+Period –∑ Power BI —ñ –∑–∞–ø–∏—Å—É—î —É bonus_docs.
    –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º is_notified = FALSE (–Ω–∞ —Ä—ñ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ –≤—Å—Ç–∞–≤–∫–∏).
    """
    token = get_power_bi_token()
    if not token:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω Power BI.")
        return

    url = f"https://api.powerbi.com/v1.0/myorg/datasets/{DATASET_ID}/executeQueries"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    payload = {"queries": [{"query": DAX_QUERY}], "serializerSettings": {"includeNulls": True}}

    logging.info(f"‚û°Ô∏è POST {url}")
    try:
        r = requests.post(url, headers=headers, json=payload, timeout=60)
        logging.info(f"‚¨ÖÔ∏è PBI status: {r.status_code}")
        if r.status_code != 200:
            # –≤–∏–≤–µ–¥–µ–º–æ –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤ —Ç—ñ–ª–∞ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logging.error(f"Body: {r.text[:1000]}")
            return

        data = r.json()
        # –æ–±–µ—Ä–µ–∂–Ω–æ –ª–æ–≥–Ω–µ–º–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ (–Ω–µ –≤—Å–µ —Ç—ñ–ª–æ)
        try:
            # –ø–æ–∫–∞–∂–µ–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É results/tables/rows –±–µ–∑ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
            res = data.get("results", [])
            if not res:
                logging.warning("‚ö†Ô∏è results –ø–æ—Ä–æ–∂–Ω—ñ–π —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
            else:
                tbls = res[0].get("tables", [])
                if not tbls:
                    logging.warning("‚ö†Ô∏è results[0].tables –ø–æ—Ä–æ–∂–Ω—ñ–π —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
                else:
                    rows = tbls[0].get("rows", [])
                    logging.info(f"üî¢ –û—Ç—Ä–∏–º–∞–Ω–æ —Ä—è–¥–∫—ñ–≤: {len(rows)}")
                    if rows:
                        first_keys = list(rows[0].keys())
                        logging.info(f"üîë –ö–ª—é—á—ñ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞: {first_keys}")
                        logging.info(f"üß© –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫: {json.dumps(rows[0], ensure_ascii=False)[:500]}")
        except Exception as ee:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –∫—Ä–∞—Å–∏–≤–æ –∑–∞–ª–æ–≥—É–≤–∞—Ç–∏ data: {ee}")

        # –¢–µ–ø–µ—Ä —Ä–µ–∞–ª—å–Ω–æ –≤–∏—Ç—è–≥–Ω–µ–º–æ rows
        rows = data["results"][0]["tables"][0].get("rows", [])

        # –ü–∞—Ä—Å–∏–º–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤ 'BonusesDetails[DocNumber]' / 'BonusesDetails[Period]'
        to_insert = []
        for row in rows:
            k_doc = next((k for k in row.keys() if k.endswith("[DocNumber]") or "DocNumber" in k), None)
            k_per = next((k for k in row.keys() if k.endswith("[Period]")    or "Period"    in k), None)

            doc = row.get(k_doc)
            per = _normalize_period(row.get(k_per))

            if doc and per:
                to_insert.append((str(doc), per))

        logging.info(f"üßæ –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–æ –≤—Å—Ç–∞–≤–∫–∏: {len(to_insert)}")
        if to_insert:
            logging.info(f"üëÄ –ü–µ—Ä—à—ñ 5 –¥–æ –≤—Å—Ç–∞–≤–∫–∏: {to_insert[:5]}")

        inserted = bulk_add_bonus_docs(to_insert)
        logging.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –±–æ–Ω—É—Å—ñ–≤ (–Ω–æ–≤–∏—Ö): {inserted}")

    except requests.RequestException as e:
        logging.exception(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ PBI: {e}")
    except Exception as e:
        logging.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó bonus_docs: {e}")


