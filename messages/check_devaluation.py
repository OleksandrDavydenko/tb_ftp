import psycopg2
import os
import logging
from telegram import Bot

KEY = os.getenv('TELEGRAM_BOT_TOKEN')

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
DATABASE_URL = os.getenv('DATABASE_URL')

def get_db_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

async def check_new_devaluation_records():
    logging.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–µ–≤–∞–ª—å–≤–∞—Ü—ñ—ó —Ä–æ–∑–ø–æ—á–∞—Ç–∞.")
    conn = get_db_connection()
    cursor = conn.cursor()

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    cursor.execute("""
    SELECT client, payment_number, acc_number, contract_number, date_from_acc, 
           date_from_payment, date_difference_in_days, currency_from_inform_acc,
           exchange_rate_acc_nbu, exchange_rate_payment_nbu, devaluation_percentage,
           payment_sum, compensation, manager
    FROM DevaluationAnalysis
    WHERE is_notified = FALSE
    """)
    new_records = cursor.fetchall()

    for record in new_records:
        client, payment_number, acc_number, contract_number, date_from_acc, \
        date_from_payment, date_difference_in_days, currency_from_inform_acc, \
        exchange_rate_acc_nbu, exchange_rate_payment_nbu, devaluation_percentage, \
        payment_sum, compensation, manager = record

        # –ü–æ—à—É–∫ Telegram ID –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        cursor.execute("SELECT telegram_id FROM users WHERE employee_name = %s", (manager,))
        manager_data = cursor.fetchone()

        # –ü–æ—à—É–∫ Telegram ID –¥–ª—è –î–∞–≤–∏–¥–µ–Ω–∫–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–∞
        cursor.execute("SELECT telegram_id FROM users WHERE employee_name = '–î–∞–≤–∏–¥–µ–Ω–∫–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä'")
        davidenko_data = cursor.fetchone()

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = (
            f"üìâ –ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–µ–≤–∞–ª—å–≤–∞—Ü—ñ—ó:\n"
            f"–ö–ª—ñ—î–Ω—Ç: {client}\n"
            f"–ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂—É: {payment_number}\n"
            f"–°—É–º–∞: {payment_sum} {currency_from_inform_acc}\n"
            f"–í—ñ–¥—Å–æ—Ç–æ–∫ –¥–µ–≤–∞–ª—å–≤–∞—Ü—ñ—ó: {devaluation_percentage}%\n"
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager}"
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É, —è–∫—â–æ –π–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ
        if manager_data:
            telegram_id = manager_data[0]
            logging.info(f"–ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑ Telegram ID: {telegram_id}")
            await send_notification(telegram_id, message)
        else:
            logging.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä {manager} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –î–∞–≤–∏–¥–µ–Ω–∫—É –û–ª–µ–∫—Å–∞–Ω–¥—Ä—É, —è–∫—â–æ –π–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ
        if davidenko_data:
            davidenko_id = davidenko_data[0]
            logging.info(f"–ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –î–∞–≤–∏–¥–µ–Ω–∫—É –û–ª–µ–∫—Å–∞–Ω–¥—Ä—É –∑ Telegram ID: {davidenko_id}")
            await send_notification(davidenko_id, message)
        else:
            logging.warning("–î–∞–≤–∏–¥–µ–Ω–∫–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        cursor.execute("""
        UPDATE DevaluationAnalysis
        SET is_notified = TRUE
        WHERE client = %s AND payment_number = %s
        """, (client, payment_number))

    conn.commit()
    cursor.close()
    conn.close()

async def send_notification(telegram_id, message):
    try:
        bot = Bot(token=KEY)
        await bot.send_message(chat_id=telegram_id, text=message)
        logging.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
