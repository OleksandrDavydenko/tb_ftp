from telegram import Bot
import logging
import datetime
from db import get_all_users
from auth import get_user_debt_data
import os
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram Bot Token
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("Telegram Bot Token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename='debts_log.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
current_date = datetime.datetime.now().date()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —É –î–î.–ú–ú.–†–†
def format_date(date_str):
    try:
        date = datetime.datetime.strptime(date_str.split('T')[0], '%Y-%m-%d').date()
        return date.strftime('%d.%m.%y')
    except ValueError:
        return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–¥—ñ–ª—É –¥–æ–≤–≥–æ–≥–æ —Ç–µ–∫—Å—Ç—É
def split_message(text, max_length=4096):
    parts = []
    while len(text) > max_length:
        split_point = text.rfind('\n', 0, max_length)
        if split_point == -1:
            split_point = max_length
        parts.append(text[:split_point])
        text = text[split_point:].strip()
    parts.append(text)
    return parts

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –±–æ—Ä–≥—ñ–≤ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def check_overdue_debts():
    users = get_all_users()

    for user in users:
        manager_name = user.get('employee_name')
        telegram_id = user.get('telegram_id')

        if not manager_name or not telegram_id:
            logging.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–±–æ Telegram ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–∞–ø–∏—Å—ñ: {user}")
            continue

        debts = get_user_debt_data(manager_name)

        if debts:
            overdue_debts = []
            for debt in debts:
                plan_date_pay_str = debt.get('[PlanDatePay]', '')

                if not plan_date_pay_str or plan_date_pay_str == '1899-12-30T00:00:00':
                    continue

                try:
                    plan_date_pay = datetime.datetime.strptime(plan_date_pay_str.split('T')[0], '%Y-%m-%d').date()
                except ValueError:
                    continue

                if plan_date_pay < current_date:
                    overdue_days = (current_date - plan_date_pay).days
                    overdue_debts.append({
                        'Client': debt.get('[Client]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                        'Deal': debt.get('[Deal]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                        'Account': debt.get('[Account]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                        'Sum_$': debt.get('[Sum_$]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                        'PlanDatePay': format_date(plan_date_pay_str),
                        'AccountDate': format_date(debt.get('[AccountDate]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')),
                        'OverdueDays': overdue_days
                    })

            if overdue_debts:
                try:
                    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    message = f"üìã *–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω—É –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫—É –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å*\n\n*–ú–µ–Ω–µ–¥–∂–µ—Ä*: {manager_name}\n\n"
                    message += "–í–∞—à—ñ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏:\n\n"

                    for overdue in overdue_debts:
                        client = overdue['Client']
                        deal = overdue['Deal']
                        account = overdue['Account']
                        days = overdue['OverdueDays']
                        sum_usd = overdue['Sum_$']
                        account_date = overdue['AccountDate']
                        plan_date_pay = overdue['PlanDatePay']

                        message += (
                            f"‚ñ´Ô∏è *–ö–ª—ñ—î–Ω—Ç:* {client}\n"
                            f"   *–£–≥–æ–¥–∞:* {deal}\n"
                            f"   *–†–∞—Ö—É–Ω–æ–∫:* {account}\n"
                            f"   *–î–∞—Ç–∞ —Ä–∞—Ö—É–Ω–∫—É:* {account_date}\n"
                            f"   *–ü–ª–∞–Ω–æ–≤–∞ –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏:* {plan_date_pay}\n"
                            f"   *–î–Ω—ñ–≤ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ:* {days}\n"
                            f"   *–°—É–º–∞ ($):* {sum_usd}\n\n"
                        )

                    message += "üö® *–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —Ü—ñ —Ä–∞—Ö—É–Ω–∫–∏.*"

                    # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è MarkdownV2
                    message = (
                        message.replace('|', '\\|')
                        .replace('-', '\\-')
                        .replace('_', '\\_')
                        .replace('.', '\\.')
                        .replace('(', '\\(')
                        .replace(')', '\\)')
                    )

                    # –ü–æ–¥—ñ–ª –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                    messages = split_message(message)
                    for part in messages:
                        await bot.send_message(chat_id=telegram_id, text=part, parse_mode="MarkdownV2")

                    logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_name} (Telegram ID: {telegram_id})")

                except Exception as e:
                    logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_name}. –ü–æ–º–∏–ª–∫–∞: {e}")
        else:
            logging.info(f"–£ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_name} –Ω–µ–º–∞—î –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏—Ö –±–æ—Ä–≥—ñ–≤.")









# –§—É–Ω–∫—Ü—ñ—è –ø–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω—é—é –Ω–∞ –∫–Ω–æ–ø–∫—É
            

async def send_overdue_debts_by_request(update, context):
    """–§–æ—Ä–º—É—î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω—É –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫—É –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    telegram_id = update.message.chat_id
    user_data = next((u for u in get_all_users() if u['telegram_id'] == telegram_id), None)

    if not user_data:
        return "‚ùó –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."

    manager_name = user_data['employee_name']
    debts = get_user_debt_data(manager_name)

    if debts:
        overdue_debts = []
        for debt in debts:
            plan_date_pay_str = debt.get('[PlanDatePay]', '')
            if not plan_date_pay_str or plan_date_pay_str == '1899-12-30T00:00:00':
                continue

            plan_date_pay = datetime.datetime.strptime(plan_date_pay_str.split('T')[0], '%Y-%m-%d').date()
            if plan_date_pay < datetime.datetime.now().date():
                overdue_days = (datetime.datetime.now().date() - plan_date_pay).days
                overdue_debts.append({
                    'Client': debt.get('[Client]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                    'Deal': debt.get('[Deal]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                    'Account': debt.get('[Account]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                    'Sum_$': debt.get('[Sum_$]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                    'PlanDatePay': format_date(plan_date_pay_str),
                    'AccountDate': format_date(debt.get('[AccountDate]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')),
                    'OverdueDays': overdue_days
                })

        if overdue_debts:
            message = f"üìã *–ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∞ –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–ª—è {manager_name}:*\n\n"
            for overdue in overdue_debts:
                message += (
                    f"‚ñ´Ô∏è *–ö–ª—ñ—î–Ω—Ç:* {overdue['Client']}\n"
                    f"   *–£–≥–æ–¥–∞:* {overdue['Deal']}\n"
                    f"   *–†–∞—Ö—É–Ω–æ–∫:* {overdue['Account']}\n"
                    f"   *–î–∞—Ç–∞ —Ä–∞—Ö—É–Ω–∫—É:* {overdue['AccountDate']}\n"
                    f"   *–ü–ª–∞–Ω–æ–≤–∞ –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏:* {overdue['PlanDatePay']}\n"
                    f"   *–î–Ω—ñ–≤ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ:* {overdue['OverdueDays']}\n"
                    f"   *–°—É–º–∞ ($):* {overdue['Sum_$']}\n\n"
                )
            return message
        else:
            return "‚úÖ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ—ó –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ."
    else:
        return "‚ÑπÔ∏è –î–∞–Ω—ñ –¥–ª—è –≤–∞—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ."
