from telegram import Bot
import logging
import datetime
from db import get_all_users
from auth import get_user_debt_data
import os
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram Bot Token
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("Telegram Bot Token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename='debts_log.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞
current_date = datetime.datetime.now().date()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –±–æ—Ä–≥—ñ–≤ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def check_overdue_debts():
    users = get_all_users()

    for user in users:
        manager_name = user.get('employee_name')
        telegram_id = user.get('telegram_id')

        if not manager_name or not telegram_id:
            logging.warning(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–±–æ Telegram ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–∞–ø–∏—Å—ñ: {user}")
            continue

        debts = get_user_debt_data(manager_name)

        if debts:
            overdue_debts = []
            for debt in debts:
                plan_date_pay_str = debt.get('[PlanDatePay]', '')

                if not plan_date_pay_str or plan_date_pay_str == '1899-12-30T00:00:00':
                    continue

                try:
                    plan_date_pay = datetime.datetime.strptime(plan_date_pay_str.split('T')[0], '%Y-%m-%d').date()
                except ValueError:
                    continue

                if plan_date_pay < current_date:
                    overdue_days = (current_date - plan_date_pay).days
                    overdue_debts.append({
                        'Client': debt.get('[Client]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                        'Account': debt.get('[Account]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                        'Sum_$': debt.get('[Sum_$]', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'),
                        'OverdueDays': overdue_days
                    })

            if overdue_debts:
                try:
                    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    message = f"üìã *–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω—É –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫—É –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å*\n\n*–ú–µ–Ω–µ–¥–∂–µ—Ä*: {manager_name}\n\n"
                    message += "–í–∞—à—ñ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏:\n\n"

                    for overdue in overdue_debts:
                        client = overdue['Client']
                        account = overdue['Account']
                        days = overdue['OverdueDays']
                        sum_usd = overdue['Sum_$']

                        message += (
                            f"‚ñ´Ô∏è *–ö–ª—ñ—î–Ω—Ç:* {client}\n"
                            f"   *–†–∞—Ö—É–Ω–æ–∫:* {account}\n"
                            f"   *–î–Ω—ñ–≤ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–æ:* {days}\n"
                            f"   *–°—É–º–∞ ($):* {sum_usd}\n\n"
                        )

                    message += "üö® *–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —Ü—ñ —Ä–∞—Ö—É–Ω–∫–∏.*"

                    # –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è MarkdownV2
                    message = (
                        message.replace('|', '\\|')
                        .replace('-', '\\-')
                        .replace('_', '\\_')
                        .replace('.', '\\.')
                        .replace('(', '\\(')
                        .replace(')', '\\)')
                    )

                    logging.info(f"–§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {manager_name}: {message}")

                    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    await bot.send_message(chat_id=telegram_id, text=message, parse_mode="MarkdownV2")
                    logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_name} (Telegram ID: {telegram_id})")

                except Exception as e:
                    logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_name}. –ü–æ–º–∏–ª–∫–∞: {e}")
        else:
            logging.info(f"–£ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {manager_name} –Ω–µ–º–∞—î –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏—Ö –±–æ—Ä–≥—ñ–≤.")

