from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext
from datetime import datetime
from auth import get_power_bi_token
import requests
import logging

async def show_workdays_years(update: Update, context: CallbackContext) -> None:
    context.user_data['menu'] = 'workdays_years'
    years = ["2024", "2025"]
    keyboard = [[KeyboardButton(year)] for year in years] + [[KeyboardButton("–ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üóì –û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", reply_markup=reply_markup)


async def show_workdays_months(update: Update, context: CallbackContext) -> None:
    selected_year = update.message.text
    context.user_data['selected_year'] = selected_year
    context.user_data['menu'] = 'workdays_months'

    months = [
        "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
        "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
    ]
    keyboard = [[KeyboardButton(month)] for month in months]
    keyboard.append([KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üìÖ –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=reply_markup)


async def show_workdays_details(update: Update, context: CallbackContext) -> None:
    selected_month = update.message.text
    context.user_data['selected_month'] = selected_month
    context.user_data['menu'] = 'workdays_details'

    employee_name = context.user_data.get('employee_name')
    year = context.user_data.get('selected_year')

    month_map = {
        "–°—ñ—á–µ–Ω—å": "01", "–õ—é—Ç–∏–π": "02", "–ë–µ—Ä–µ–∑–µ–Ω—å": "03", "–ö–≤—ñ—Ç–µ–Ω—å": "04",
        "–¢—Ä–∞–≤–µ–Ω—å": "05", "–ß–µ—Ä–≤–µ–Ω—å": "06", "–õ–∏–ø–µ–Ω—å": "07", "–°–µ—Ä–ø–µ–Ω—å": "08",
        "–í–µ—Ä–µ—Å–µ–Ω—å": "09", "–ñ–æ–≤—Ç–µ–Ω—å": "10", "–õ–∏—Å—Ç–æ–ø–∞–¥": "11", "–ì—Ä—É–¥–µ–Ω—å": "12"
    }
    month_num = month_map.get(selected_month)
    if not month_num:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –º—ñ—Å—è—Ü—å.")
        return

    token = get_power_bi_token()
    if not token:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –¥–ª—è Power BI.")
        return

    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    dax_query = {
        "queries": [
            {
                "query": f"""
                    EVALUATE
                    SELECTCOLUMNS(
                        FILTER(
                            workdays_by_employee,
                            workdays_by_employee[Employee] = \"{employee_name}\" &&
                            workdays_by_employee[Period] = DATE({year}, {int(month_num)}, 1)
                        ),
                        \"Period\", workdays_by_employee[Period],
                        \"TotalDays\", workdays_by_employee[TotalDays],
                        \"WeekendDays\", workdays_by_employee[WeekendDays],
                        \"HolidayDays\", workdays_by_employee[HolidayDays],
                        \"WorkDays\", workdays_by_employee[WorkDays],
                        \"LeaveWithoutPay\", workdays_by_employee[LeaveWithoutPay],
                        \"RegularVacationDays\", workdays_by_employee[RegularVacationDays],
                        \"SickLeaveDays\", workdays_by_employee[SickLeaveDays],
                        \"WorkedDays\", workdays_by_employee[WorkedDays]
                    )
                """
            }
        ],
        "serializerSettings": {"includeNulls": True}
    }

    power_bi_url = "https://api.powerbi.com/v1.0/myorg/datasets/8b80be15-7b31-49e4-bc85-8b37a0d98f1c/executeQueries"
    response = requests.post(power_bi_url, headers=headers, json=dax_query)

    logging.info(f"üì• –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Power BI: {response.status_code}")
    logging.info(f"üìÑ –í–º—ñ—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.text}")

    if response.status_code != 200:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ Power BI.")
        return

    data = response.json()
    rows = data['results'][0]['tables'][0].get('rows', [])

    if not rows:
        await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω—ñ –ø–æ –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏—Ö –¥–Ω—è—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        return

    row = rows[0]
    message = (
        f"üìÖ –ü–µ—Ä—ñ–æ–¥: {row['[Period]'][:10]}\n"
        f"üë§ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫: {employee_name}\n"
        f"üìä –í—Å—å–æ–≥–æ –¥–Ω—ñ–≤: {row['[TotalDays]']}\n"
        f"üìÜ –†–æ–±–æ—á—ñ –¥–Ω—ñ: {row['[WorkDays]']}\n"
        f"üõå –í–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ: {row['[WeekendDays]']}\n"
        f"üéâ –°–≤—è—Ç–∫–æ–≤—ñ –¥–Ω—ñ: {row['[HolidayDays]']}\n"
        f"üö´ –í—ñ–¥–ø—É—Å—Ç–∫–∞ –∑–∞ —Å–≤—ñ–π —Ä–∞—Ö—É–Ω–æ–∫: {row['[LeaveWithoutPay]']}\n"
        f"üèñ –ó–≤–∏—á–∞–π–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞: {row['[RegularVacationDays]']}\n"
        f"ü§í –õ—ñ–∫–∞—Ä–Ω—è–Ω—ñ: {row['[SickLeaveDays]']}\n"
        f"‚úÖ –í—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ: {row['[WorkedDays]']}\n"
    )

    await update.message.reply_text(message)
