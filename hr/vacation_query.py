from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext
from auth import get_power_bi_token
import requests
import logging

async def show_vacation_balance(update: Update, context: CallbackContext) -> None:
    context.user_data['menu'] = 'hr_main'
    employee_name = context.user_data.get('employee_name')

    if not employee_name:
        await update.message.reply_text("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —ñ–º'—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞.")
        return

    token = get_power_bi_token()
    if not token:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ Power BI.")
        return

    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    dataset_id = '8b80be15-7b31-49e4-bc85-8b37a0d98f1c'
    power_bi_url = f'https://api.powerbi.com/v1.0/myorg/datasets/{dataset_id}/executeQueries'

    dax_query = {
        "queries": [
            {
                "query": f"""
                    EVALUATE
                    SELECTCOLUMNS(
                        FILTER(
                            employee_vacation_summary,
                            STARTSWITH(employee_vacation_summary[employee_name] = \"{employee_name}\"
                        ),
                        "Year", employee_vacation_summary[year],
                        "Organization", employee_vacation_summary[organization],
                        "Accrued", employee_vacation_summary[accrued_days],
                        "Used", employee_vacation_summary[used_days],
                        "Remaining", employee_vacation_summary[remaining_days]
                    )
                """
            }
        ],
        "serializerSettings": {"includeNulls": True}
    }

    logging.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Power BI –¥–ª—è {employee_name}")
    response = requests.post(power_bi_url, headers=headers, json=dax_query)

    logging.info(f"üì• –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Power BI: {response.status_code}")
    logging.info(f"üìÑ –í–º—ñ—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.text}")

    if response.status_code != 200:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –≤—ñ–¥–ø—É—Å—Ç–∫–∏.")
        return

    try:
        data = response.json()
        rows = data['results'][0]['tables'][0].get('rows', [])
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ JSON: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Power BI.")
        return

    if not rows:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥–ø—É—Å—Ç–∫–∏.")
        return

    # –ü–æ–±—É–¥–æ–≤–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = f"üìÑ –í—ñ–¥–ø—É—Å—Ç–∫–∏ –¥–ª—è: *{employee_name}*\n\n"

    total_accrued = total_used = total_remaining = 0

    for row in rows:
        year = str(row['[Year]'])
        org = str(row['[Organization]'])
        accrued = float(row['[Accrued]'] or 0)
        used = float(row['[Used]'] or 0)
        remaining = float(row['[Remaining]'] or 0)

        total_accrued += accrued
        total_used += used
        total_remaining += remaining

        message += (
            f"üìÜ *{year}* | üè¢ {org}\n"
            f"üìà –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {accrued:.1f} –¥–Ω—ñ–≤\n"
            f"üìâ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {used:.1f} –¥–Ω—ñ–≤\n"
            f"üìå –ó–∞–ª–∏—à–æ–∫: {remaining:.1f} –¥–Ω—ñ–≤\n\n"
        )

    message += (
        "üßæ *–ü—ñ–¥—Å—É–º–æ–∫:*\n"
        f"üîπ –í—Å—å–æ–≥–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {total_accrued:.1f} –¥–Ω—ñ–≤\n"
        f"üî∏ –í—Å—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {total_used:.1f} –¥–Ω—ñ–≤\n"
        f"‚úÖ –ó–∞–ª–∏—à–æ–∫: {total_remaining:.1f} –¥–Ω—ñ–≤"
    )

    await update.message.reply_text(message, parse_mode="Markdown")

    keyboard = [[KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)
