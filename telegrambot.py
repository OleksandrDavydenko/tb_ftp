import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging
import os
import sys

from messages.check_payments import check_new_payments
from messages.sync_payments import sync_payments
from auth import is_phone_number_in_power_bi
from db import add_telegram_user, get_user_joined_at
from messages.reminder import schedule_monthly_reminder
from messages.check_devaluation import check_new_devaluation_records
from messages.sync_devaluation import sync_devaluation_data  # –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from deb.debt_handlers import show_debt_options, show_debt_details, show_debt_histogram, show_debt_pie_chart
from salary.salary_handlers import show_salary_years, show_salary_months, show_salary_details
from employee_analytics.analytics_handler import (
    show_analytics_options, show_analytics_years, show_analytics_months, 
    show_monthly_analytics, show_yearly_chart_for_parameter
)

KEY = os.getenv('TELEGRAM_BOT_TOKEN')
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
scheduler = AsyncIOScheduler()

async def start(update: Update, context: CallbackContext) -> None:
    context.user_data['registered'] = False
    await prompt_for_phone_number(update, context)

async def prompt_for_phone_number(update: Update, context: CallbackContext) -> None:
    contact_button = KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True)
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º' –Ω–∏–∂—á–µ.",
        reply_markup=reply_markup
    )

def normalize_phone_number(phone_number):
    return phone_number[1:] if phone_number.startswith('+') else phone_number

async def handle_contact(update: Update, context: CallbackContext) -> None:
    if update.message.contact:
        phone_number = normalize_phone_number(update.message.contact.phone_number)
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}")
        found, employee_name = is_phone_number_in_power_bi(phone_number)
        
        if found:
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π: {employee_name}")
            add_telegram_user(phone_number=phone_number, telegram_id=update.message.from_user.id,
                              telegram_name=update.message.from_user.first_name, employee_name=employee_name)
            joined_at = get_user_joined_at(phone_number)
            logging.info(f"–î–∞—Ç–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {joined_at}")

            if joined_at:
                try:
                    await sync_payments()
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–ª–∞—Ç–µ–∂—ñ–≤: {e}")

            context.user_data.update({
                'registered': True,
                'phone_number': phone_number,
                'telegram_name': update.message.from_user.first_name,
                'employee_name': employee_name
            })
            await update.message.reply_text(f"–í—ñ—Ç–∞—î–º–æ, {context.user_data['employee_name']}! –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ.")
            await show_main_menu(update, context)
        else:
            await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            await prompt_for_phone_number(update, context)

async def show_main_menu(update: Update, context: CallbackContext) -> None:
    analytics_button = KeyboardButton(text="üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
    salary_button = KeyboardButton(text="üíº –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π –ª–∏—Å—Ç")
    debt_button = KeyboardButton(text="üìâ –î–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å")
    reply_markup = ReplyKeyboardMarkup([[analytics_button, salary_button], [debt_button]], one_time_keyboard=True)
    await update.message.reply_text("üè† –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

async def handle_main_menu(update: Update, context: CallbackContext) -> None:
    if not context.user_data.get('registered', False):
        await prompt_for_phone_number(update, context)
        return

    text = update.message.text
    if text == "üìâ –î–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å":
        await show_debt_options(update, context)
    elif text == "–¢–∞–±–ª–∏—Ü—è":
        await show_debt_details(update, context)
    elif text == "–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞":
        await show_debt_histogram(update, context)
    elif text == "–î—ñ–∞–≥—Ä–∞–º–∞":
        await show_debt_pie_chart(update, context)
    elif text == "üíº –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π –ª–∏—Å—Ç":
        context.user_data['menu'] = 'salary_years'
        await show_salary_years(update, context)
    elif text == "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞":
        await show_analytics_options(update, context)
    elif text == "–ù–∞–∑–∞–¥":
        await handle_back_navigation(update, context)
    elif text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
    elif text in ["–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å", "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–∫"]:
        await handle_analytics_selection(update, context, text)
    elif text in ["2024", "2025"]:
        await handle_year_choice(update, context)
    elif text in ["–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å", "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"]:
        await handle_month_choice(update, context)
    elif text in ["–î–æ—Ö—ñ–¥", "–í–∞–ª–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", "–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ñ—Å—Ç—å", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥"]:
        await handle_parameter_choice(update, context)

async def handle_back_navigation(update: Update, context: CallbackContext) -> None:
    menu = context.user_data.get('menu')

    if menu == 'salary_months':
        await show_salary_years(update, context)
    elif menu == 'salary_years':
        await show_main_menu(update, context)
    elif menu == 'analytics_years':
        await show_analytics_options(update, context)
    elif menu == 'parameter_selection':
        await show_analytics_years(update, context)
    elif menu == 'analytics_months':
        await show_analytics_years(update, context)
    elif menu in ['debt_details', 'debt_histogram', 'debt_pie_chart']:
        await show_debt_options(update, context)
    else:
        await show_main_menu(update, context)

async def handle_analytics_selection(update: Update, context: CallbackContext, selection: str) -> None:
    context.user_data['analytics_type'] = 'monthly' if selection == "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å" else 'yearly'
    await show_analytics_years(update, context)

async def handle_year_choice(update: Update, context: CallbackContext) -> None:
    selected_year = update.message.text
    context.user_data['selected_year'] = selected_year
    current_menu = context.user_data.get('menu')

    if current_menu == 'salary_years':
        await show_salary_months(update, context)
    elif context.user_data.get('analytics_type') == 'monthly':
        await show_analytics_months(update, context)
    elif context.user_data.get('analytics_type') == 'yearly':
        await show_parameter_selection(update, context)

async def handle_month_choice(update: Update, context: CallbackContext) -> None:
    selected_month = update.message.text
    context.user_data['selected_month'] = selected_month
    current_menu = context.user_data.get('menu')

    if current_menu == 'salary_months':
        await show_salary_details(update, context)
    else:
        await show_monthly_analytics(update, context)

async def show_parameter_selection(update: Update, context: CallbackContext) -> None:
    parameter_buttons = [
        [KeyboardButton("–î–æ—Ö—ñ–¥")],
        [KeyboardButton("–í–∞–ª–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫")],
        [KeyboardButton("–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ñ—Å—Ç—å")],
        [KeyboardButton("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(parameter_buttons, one_time_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞:", reply_markup=reply_markup)
    context.user_data['menu'] = 'parameter_selection'

async def handle_parameter_choice(update: Update, context: CallbackContext) -> None:
    selected_parameter = update.message.text
    context.user_data['selected_parameter'] = selected_parameter
    employee_name = context.user_data['employee_name']
    selected_year = context.user_data['selected_year']

    await show_yearly_chart_for_parameter(update, context, employee_name, selected_year, selected_parameter)

async def shutdown(app, scheduler):
    await app.shutdown()
    scheduler.shutdown(wait=True)
    logging.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ.")

def main():
    app = ApplicationBuilder().token(KEY).build()
    scheduler.add_job(check_new_payments, 'interval', seconds=300)
    scheduler.add_job(sync_payments, 'interval', seconds=270)
    scheduler.add_job(check_new_devaluation_records, 'interval', seconds=10800)
    scheduler.add_job(sync_devaluation_data, 'interval', seconds=10800)  # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–µ–≤–∞–ª—å–≤–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    schedule_monthly_reminder(scheduler)
    scheduler.start()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(MessageHandler(filters.Regex("^(üìâ –î–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å|–ù–∞–∑–∞–¥|–¢–∞–±–ª–∏—Ü—è|–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞|–î—ñ–∞–≥—Ä–∞–º–∞|üíº –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π –ª–∏—Å—Ç|–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é|üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞|–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å|–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–∫|2024|2025|–°—ñ—á–µ–Ω—å|–õ—é—Ç–∏–π|–ë–µ—Ä–µ–∑–µ–Ω—å|–ö–≤—ñ—Ç–µ–Ω—å|–¢—Ä–∞–≤–µ–Ω—å|–ß–µ—Ä–≤–µ–Ω—å|–õ–∏–ø–µ–Ω—å|–°–µ—Ä–ø–µ–Ω—å|–í–µ—Ä–µ—Å–µ–Ω—å|–ñ–æ–≤—Ç–µ–Ω—å|–õ–∏—Å—Ç–æ–ø–∞–¥|–ì—Ä—É–¥–µ–Ω—å|–î–æ—Ö—ñ–¥|–í–∞–ª–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫|–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ñ—Å—Ç—å|–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥)$"), handle_main_menu))

    try:
        app.run_polling()
    finally:
        asyncio.run(shutdown(app, scheduler))

if __name__ == '__main__':
    main()
