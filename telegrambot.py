import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommandScopeDefault, BotCommand, MenuButtonCommands
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from information.querryFinanceUa import store_exchange_rates
import logging
import os
import sys



from messages.check_payments import check_new_payments
from messages.sync_payments import sync_payments
from auth import is_phone_number_in_power_bi
from db import add_telegram_user, get_user_joined_at, get_user_status, get_employee_name, log_user_action
from auth import verify_and_add_user 
from messages.reminder import schedule_monthly_reminder
from messages.check_devaluation import check_new_devaluation_records
from messages.sync_devaluation import sync_devaluation_data  # –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from deb.debt_handlers import show_debt_options, show_debt_details, show_debt_histogram, show_debt_pie_chart, handle_overdue_debt
from salary.salary_handlers import show_salary_years, show_salary_months, show_salary_details
from employee_analytics.analytics_handler import (
    show_analytics_options, show_analytics_years, show_analytics_months, 
    show_monthly_analytics, show_yearly_chart_for_parameter
)
from information.help_menu import show_help_menu, show_currency_rates, show_devaluation_data
from messages.weekly_overdue_debts import check_overdue_debts
from sync_status import sync_user_statuses
# from utils.clear_history import clear_chat_history

KEY = os.getenv('TELEGRAM_BOT_TOKEN')

def set_bot_menu_sync(app):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ —É –º–µ–Ω—é."""
    commands = [
        BotCommand("menu", "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
        BotCommand("debt", "üìâ –î–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å"),
        BotCommand("salary", "üíº –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π –ª–∏—Å—Ç"),
        BotCommand("analytics", "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"),
        BotCommand("info", "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
    ]

    loop = asyncio.get_event_loop()
    loop.run_until_complete(app.bot.set_my_commands(commands))
    loop.run_until_complete(app.bot.set_chat_menu_button(menu_button=MenuButtonCommands()))




logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
scheduler = AsyncIOScheduler()



async def start(update: Update, context: CallbackContext) -> None:
    context.user_data['registered'] = False
    await prompt_for_phone_number(update, context)

async def prompt_for_phone_number(update: Update, context: CallbackContext) -> None:
    contact_button = KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True)
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º' –Ω–∏–∂—á–µ.",
        reply_markup=reply_markup
    )

def normalize_phone_number(phone_number):
    return phone_number[1:] if phone_number.startswith('+') else phone_number

async def handle_contact(update: Update, context: CallbackContext) -> None:
    if update.message.contact:
        phone_number = normalize_phone_number(update.message.contact.phone_number)
        logging.info(f"üìû –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}")

        user_id = update.message.from_user.id
        log_user_action(user_id, f"–ù–∞–¥–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Power BI
        verify_and_add_user(phone_number, update.message.from_user.id, update.message.from_user.first_name)

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å —ñ–∑ –±–∞–∑–∏
        status = get_user_status(phone_number)
        logging.info(f"üìä –°—Ç–∞—Ç—É—Å —É –ë–î: {status}")

        if status == "active":
            employee_name = get_employee_name(phone_number)  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            logging.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–∏–π: {employee_name} ({phone_number})")

            joined_at = get_user_joined_at(phone_number)
            logging.info(f"üìÖ –î–∞—Ç–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {joined_at}")

            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–ª–∞—Ç–µ–∂—ñ–≤ (–ù–µ–º–∞—î –ø–æ—Ç—Ä–µ–±–∏ –≤—Å—ñ—Ö —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó)
            # if joined_at:
            #    try:
            #        await sync_payments()
            #    except Exception as e:
            #        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–ª–∞—Ç–µ–∂—ñ–≤: {e}")

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –±–æ—Ç–∞
            context.user_data.update({
                'registered': True,
                'phone_number': phone_number,
                'telegram_name': update.message.from_user.first_name,
                'employee_name': employee_name
            })

            await update.message.reply_text(f"‚úÖ –í—ñ—Ç–∞—î–º–æ, {employee_name}! –î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ.")
            await show_main_menu(update, context)

        else:
            logging.warning(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è {phone_number} (–°—Ç–∞—Ç—É—Å: {status})")
            await update.message.reply_text("üö´ –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á. –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            await prompt_for_phone_number(update, context)



async def show_main_menu(update: Update, context: CallbackContext) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ç–∞ –ø—Ä–∞—Ü—é—î –∑ –±—É–¥—å-—è–∫–æ–≥–æ –º—ñ—Å—Ü—è –±–æ—Ç–∞."""
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logging.info("üîÑ –í–∏–∫–ª–∏–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    if not context.user_data.get('registered', False):
        logging.warning("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        await prompt_for_phone_number(update, context)
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    reply_markup = get_main_menu_keyboard()

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ inline-–∫–Ω–æ–ø–∫–∞
    if update.message:
        await update.message.reply_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)


# –û–∫—Ä–µ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_keyboard():
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"), KeyboardButton(text="üíº –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π –ª–∏—Å—Ç")],
            [KeyboardButton(text="üìâ –î–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å"), KeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")],
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é")]  # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –æ—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
            
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


async def handle_main_menu(update: Update, context: CallbackContext) -> None:
    if not context.user_data.get('registered', False):
        await prompt_for_phone_number(update, context)
        return
    


    query = update.callback_query  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ callback-–∑–∞–ø–∏—Ç
    if query:
        text = query.data  # –Ø–∫—â–æ —Ü–µ inline-–∫–Ω–æ–ø–∫–∞
        user_id = query.from_user.id
        await query.answer()
    else:
        text = update.message.text if update.message else None
        user_id = update.message.from_user.id if update.message else None

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º —É –±–∞–∑—É
    logging.info(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    if not text or not user_id:
        logging.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∞–±–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        return  # –í–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –∞–±–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    # ‚úÖ –ó–∞–ø–∏—Å —É –ª–æ–≥–∏ (–æ–¥–∏–Ω —Ä–∞–∑, –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è)
    try:
        log_user_action(user_id, text)
        logging.info(f"‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ –¥–ª—è {user_id}: {text}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è {user_id}: {e}")
    
    if text == "üìâ –î–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å":
        await show_debt_options(update, context)
    elif text == "–¢–∞–±–ª–∏—Ü—è":
        await show_debt_details(update, context)
    elif text == "–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞":
        await show_debt_histogram(update, context)
    elif text == "–î—ñ–∞–≥—Ä–∞–º–∞":
        await show_debt_pie_chart(update, context)
    elif text == "–ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∞ –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å":
    #    from messages.weekly_overdue_debts import send_overdue_debts_by_request
        await handle_overdue_debt(update, context)
    elif text == "üíº –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π –ª–∏—Å—Ç":
        context.user_data['menu'] = 'salary_years'
        await show_salary_years(update, context)
    elif text == "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞":
        await show_analytics_options(update, context)
    elif text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
        await show_help_menu(update, context)  # –î–æ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–º–µ–Ω—é
    elif text == "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç":
        await show_currency_rates(update, context)
    elif text == "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–≤–∞–ª—å–≤–∞—Ü—ñ—ó":
        await show_devaluation_data(update, context)
    elif text == "–ù–∞–∑–∞–¥":
        await handle_back_navigation(update, context)
    elif text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
    elif text in ["–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å", "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–∫"]:
        await handle_analytics_selection(update, context, text)
    elif text in ["2024", "2025"]:
        await handle_year_choice(update, context)
    elif text in ["–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å", "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"]:
        await handle_month_choice(update, context)
    elif text in ["–î–æ—Ö—ñ–¥", "–í–∞–ª–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", "–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ñ—Å—Ç—å", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥"]:
        await handle_parameter_choice(update, context)
    elif text.startswith("/debt"):  
        await show_debt_options(update, context)  
    elif text.startswith("/info"):  
        await show_help_menu(update, context)  
    elif text.startswith("/analytics"):  
        await show_analytics_options(update, context)
    elif text.startswith("/salary"):  
        context.user_data['menu'] = 'salary_years'
        await show_salary_years(update, context)
    elif text.startswith("/menu"):  
        await show_main_menu(update, context)
"""     elif text == "üóë –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é":
        await clear_chat_history(update, context) """

async def handle_back_navigation(update: Update, context: CallbackContext) -> None:
    menu = context.user_data.get('menu')

    if menu == 'salary_months':
        await show_salary_years(update, context)
    elif menu == 'help_menu':
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é "–î–æ–≤—ñ–¥–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
        await show_help_menu(update, context)
    elif menu == 'devaluation_data':
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é "–î–æ–≤—ñ–¥–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
        await show_help_menu(update, context)
    elif menu == 'salary_years':
        await show_main_menu(update, context)
    elif menu == 'analytics_years':
        await show_analytics_options(update, context)
    elif menu == 'parameter_selection':
        await show_analytics_years(update, context)
    elif menu == 'analytics_months':
        await show_analytics_years(update, context)
    elif menu in ['debt_details', 'debt_histogram', 'debt_pie_chart', 'overdue_debt']:
        await show_debt_options(update, context)
    else:
        await show_main_menu(update, context)

async def handle_analytics_selection(update: Update, context: CallbackContext, selection: str) -> None:
    context.user_data['analytics_type'] = 'monthly' if selection == "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å" else 'yearly'
    await show_analytics_years(update, context)

async def handle_year_choice(update: Update, context: CallbackContext) -> None:
    selected_year = update.message.text
    context.user_data['selected_year'] = selected_year
    current_menu = context.user_data.get('menu')

    if current_menu == 'salary_years':
        await show_salary_months(update, context)
    elif context.user_data.get('analytics_type') == 'monthly':
        await show_analytics_months(update, context)
    elif context.user_data.get('analytics_type') == 'yearly':
        await show_parameter_selection(update, context)

async def handle_month_choice(update: Update, context: CallbackContext) -> None:
    selected_month = update.message.text
    context.user_data['selected_month'] = selected_month
    current_menu = context.user_data.get('menu')

    if current_menu == 'salary_months':
        await show_salary_details(update, context)
    else:
        await show_monthly_analytics(update, context)

async def show_parameter_selection(update: Update, context: CallbackContext) -> None:
    parameter_buttons = [
        [KeyboardButton("–î–æ—Ö—ñ–¥")],
        [KeyboardButton("–í–∞–ª–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫")],
        [KeyboardButton("–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ñ—Å—Ç—å")],
        [KeyboardButton("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(parameter_buttons, one_time_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞:", reply_markup=reply_markup)
    context.user_data['menu'] = 'parameter_selection'

async def handle_parameter_choice(update: Update, context: CallbackContext) -> None:
    selected_parameter = update.message.text
    context.user_data['selected_parameter'] = selected_parameter
    employee_name = context.user_data['employee_name']
    selected_year = context.user_data['selected_year']

    await show_yearly_chart_for_parameter(update, context, employee_name, selected_year, selected_parameter)

async def shutdown(app, scheduler):
    await app.shutdown()
    scheduler.shutdown(wait=True)
    logging.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ.")

def main():
    app = ApplicationBuilder().token(KEY).build()

    set_bot_menu_sync(app)

    scheduler.add_job(check_new_payments, 'interval', seconds=400)
    scheduler.add_job(sync_payments, 'interval', seconds=350)
    scheduler.add_job(check_new_devaluation_records, 'interval', seconds=10800)
    scheduler.add_job(sync_devaluation_data, 'interval', seconds=10800)  # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–µ–≤–∞–ª—å–≤–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    schedule_monthly_reminder(scheduler)


    kyiv_timezone = timezone('Europe/Kiev')
    scheduler.add_job(
        store_exchange_rates,
        'cron',
        hour=10,
        minute=00,
        timezone=kyiv_timezone,
        id='daily_exchange_rates',
    )

    scheduler.add_job(
        check_overdue_debts,  # –§—É–Ω–∫—Ü—ñ—è, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏
        'cron',  # –¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞
        day_of_week='tue',  # –ó–∞–ø—É—Å–∫ —â–æ–≤—ñ–≤—Ç–æ—Ä–∫–∞
        hour=11,  # –û 11:00
        timezone='Europe/Kiev'  # –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å
    )

    scheduler.add_job(sync_user_statuses, 'interval', minutes=100)


    scheduler.start()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))
    app.add_handler(MessageHandler(filters.COMMAND, handle_main_menu))
  

    app.add_handler(MessageHandler(filters.Regex(r"^\s*–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\s*$"), show_main_menu))
    app.add_handler(CommandHandler("menu", show_main_menu))

    # ‚úÖ –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥
    
    app.add_handler(CommandHandler("debt", show_debt_options))
    app.add_handler(CommandHandler("salary", show_salary_years))
    app.add_handler(CommandHandler("analytics", show_analytics_options))
    app.add_handler(CommandHandler("info", show_help_menu))



    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(MessageHandler(filters.Regex("^(üìâ –î–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å|–ù–∞–∑–∞–¥|–¢–∞–±–ª–∏—Ü—è|–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞|–î—ñ–∞–≥—Ä–∞–º–∞|üíº –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π –ª–∏—Å—Ç|‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è|üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç|–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–≤–∞–ª—å–≤–∞—Ü—ñ—ó|–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é|üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞|–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å|–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞ —Ä—ñ–∫|2024|2025|–°—ñ—á–µ–Ω—å|–õ—é—Ç–∏–π|–ë–µ—Ä–µ–∑–µ–Ω—å|–ö–≤—ñ—Ç–µ–Ω—å|–¢—Ä–∞–≤–µ–Ω—å|–ß–µ—Ä–≤–µ–Ω—å|–õ–∏–ø–µ–Ω—å|–°–µ—Ä–ø–µ–Ω—å|–í–µ—Ä–µ—Å–µ–Ω—å|–ñ–æ–≤—Ç–µ–Ω—å|–õ–∏—Å—Ç–æ–ø–∞–¥|–ì—Ä—É–¥–µ–Ω—å|–î–æ—Ö—ñ–¥|–í–∞–ª–æ–≤–∏–π –ø—Ä–∏–±—É—Ç–æ–∫|–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ñ—Å—Ç—å|–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥|–ü—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∞ –¥–µ–±—ñ—Ç–æ—Ä—Å—å–∫–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å)$"), handle_main_menu))

    try:
        app.run_polling()
    finally:
        asyncio.run(shutdown(app, scheduler))

if __name__ == '__main__':
    main()



